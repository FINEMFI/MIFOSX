e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530    1) /**
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530    2)  * This Source Code Form is subject to the terms of the Mozilla Public
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530    3)  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530    4)  * You can obtain one at http://mozilla.org/MPL/2.0/.
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530    5)  */
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530    6) package org.mifosplatform.portfolio.loanaccount.service;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530    7) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530    8) import java.math.BigDecimal;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530    9) import java.sql.ResultSet;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   10) import java.sql.SQLException;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   11) import java.util.ArrayList;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   12) import java.util.Arrays;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   13) import java.util.Collection;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530   14) import java.util.Date;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   15) import java.util.HashMap;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   16) import java.util.List;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   17) import java.util.Map;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   18) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   19) import org.apache.commons.lang.StringUtils;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   20) import org.joda.time.Days;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   21) import org.joda.time.LocalDate;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   22) import org.joda.time.format.DateTimeFormat;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   23) import org.joda.time.format.DateTimeFormatter;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   24) import org.mifosplatform.accounting.common.AccountingRuleType;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   25) import org.mifosplatform.infrastructure.codes.data.CodeValueData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   26) import org.mifosplatform.infrastructure.codes.service.CodeValueReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   27) import org.mifosplatform.infrastructure.core.data.EnumOptionData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   28) import org.mifosplatform.infrastructure.core.domain.JdbcSupport;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   29) import org.mifosplatform.infrastructure.core.service.DateUtils;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   30) import org.mifosplatform.infrastructure.core.service.Page;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   31) import org.mifosplatform.infrastructure.core.service.PaginationHelper;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   32) import org.mifosplatform.infrastructure.core.service.RoutingDataSource;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530   33) import org.mifosplatform.infrastructure.core.service.SearchParameters;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   34) import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   35) import org.mifosplatform.organisation.monetary.data.CurrencyData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   36) import org.mifosplatform.organisation.monetary.domain.ApplicationCurrency;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   37) import org.mifosplatform.organisation.monetary.domain.ApplicationCurrencyRepositoryWrapper;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   38) import org.mifosplatform.organisation.monetary.domain.MonetaryCurrency;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   39) import org.mifosplatform.organisation.monetary.domain.Money;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   40) import org.mifosplatform.organisation.staff.data.StaffData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   41) import org.mifosplatform.organisation.staff.service.StaffReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   42) import org.mifosplatform.portfolio.account.data.AccountTransferData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   43) import org.mifosplatform.portfolio.accountdetails.domain.AccountType;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   44) import org.mifosplatform.portfolio.accountdetails.service.AccountEnumerations;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   45) import org.mifosplatform.portfolio.calendar.data.CalendarData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   46) import org.mifosplatform.portfolio.calendar.domain.CalendarEntityType;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   47) import org.mifosplatform.portfolio.calendar.service.CalendarReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   48) import org.mifosplatform.portfolio.charge.data.ChargeData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   49) import org.mifosplatform.portfolio.charge.domain.ChargeTimeType;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   50) import org.mifosplatform.portfolio.charge.service.ChargeReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   51) import org.mifosplatform.portfolio.client.data.ClientData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   52) import org.mifosplatform.portfolio.client.domain.ClientEnumerations;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   53) import org.mifosplatform.portfolio.client.service.ClientReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   54) import org.mifosplatform.portfolio.common.domain.PeriodFrequencyType;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   55) import org.mifosplatform.portfolio.common.service.CommonEnumerations;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   56) import org.mifosplatform.portfolio.fund.data.FundData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   57) import org.mifosplatform.portfolio.fund.service.FundReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   58) import org.mifosplatform.portfolio.group.data.GroupGeneralData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   59) import org.mifosplatform.portfolio.group.data.GroupRoleData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   60) import org.mifosplatform.portfolio.group.service.GroupReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   61) import org.mifosplatform.portfolio.loanaccount.data.DisbursementData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   62) import org.mifosplatform.portfolio.loanaccount.data.LoanAccountData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   63) import org.mifosplatform.portfolio.loanaccount.data.LoanApplicationTimelineData;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530   64) import org.mifosplatform.portfolio.loanaccount.data.LoanApprovalData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   65) import org.mifosplatform.portfolio.loanaccount.data.LoanInterestRecalculationData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   66) import org.mifosplatform.portfolio.loanaccount.data.LoanScheduleAccrualData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   67) import org.mifosplatform.portfolio.loanaccount.data.LoanStatusEnumData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   68) import org.mifosplatform.portfolio.loanaccount.data.LoanSummaryData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   69) import org.mifosplatform.portfolio.loanaccount.data.LoanTermVariationsData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   70) import org.mifosplatform.portfolio.loanaccount.data.LoanTransactionData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   71) import org.mifosplatform.portfolio.loanaccount.data.LoanTransactionEnumData;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530   72) import org.mifosplatform.portfolio.loanaccount.data.PaidInAdvanceData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   73) import org.mifosplatform.portfolio.loanaccount.data.RepaymentScheduleRelatedLoanData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   74) import org.mifosplatform.portfolio.loanaccount.domain.Loan;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   75) import org.mifosplatform.portfolio.loanaccount.domain.LoanRepaymentScheduleInstallment;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   76) import org.mifosplatform.portfolio.loanaccount.domain.LoanRepository;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   77) import org.mifosplatform.portfolio.loanaccount.domain.LoanStatus;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   78) import org.mifosplatform.portfolio.loanaccount.domain.LoanTermVariationType;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   79) import org.mifosplatform.portfolio.loanaccount.domain.LoanTransaction;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   80) import org.mifosplatform.portfolio.loanaccount.domain.LoanTransactionRepository;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   81) import org.mifosplatform.portfolio.loanaccount.domain.LoanTransactionType;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   82) import org.mifosplatform.portfolio.loanaccount.exception.LoanNotFoundException;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   83) import org.mifosplatform.portfolio.loanaccount.exception.LoanTransactionNotFoundException;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   84) import org.mifosplatform.portfolio.loanaccount.loanschedule.data.LoanScheduleData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   85) import org.mifosplatform.portfolio.loanaccount.loanschedule.data.LoanSchedulePeriodData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   86) import org.mifosplatform.portfolio.loanaccount.loanschedule.data.OverdueLoanScheduleData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   87) import org.mifosplatform.portfolio.loanaccount.loanschedule.domain.LoanScheduleGeneratorFactory;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   88) import org.mifosplatform.portfolio.loanproduct.data.LoanProductData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   89) import org.mifosplatform.portfolio.loanproduct.data.TransactionProcessingStrategyData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   90) import org.mifosplatform.portfolio.loanproduct.service.LoanDropdownReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   91) import org.mifosplatform.portfolio.loanproduct.service.LoanEnumerations;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   92) import org.mifosplatform.portfolio.loanproduct.service.LoanProductReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   93) import org.mifosplatform.portfolio.paymentdetail.PaymentDetailConstants;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   94) import org.mifosplatform.portfolio.paymentdetail.data.PaymentDetailData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   95) import org.mifosplatform.useradministration.domain.AppUser;
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100   96) import org.slf4j.Logger;
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100   97) import org.slf4j.LoggerFactory;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   98) import org.springframework.beans.factory.annotation.Autowired;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530   99) import org.springframework.dao.DataAccessException;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  100) import org.springframework.dao.EmptyResultDataAccessException;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  101) import org.springframework.jdbc.core.JdbcTemplate;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  102) import org.springframework.jdbc.core.ResultSetExtractor;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  103) import org.springframework.jdbc.core.RowMapper;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  104) import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  105) import org.springframework.stereotype.Service;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  106) import org.springframework.util.CollectionUtils;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  107) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  108) @Service
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  109) public class LoanReadPlatformServiceImpl implements LoanReadPlatformService {
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100  110)     private static final Logger logger = LoggerFactory.getLogger(LoanReadPlatformServiceImpl.class);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  111) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  112)     private final JdbcTemplate jdbcTemplate;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  113)     private final PlatformSecurityContext context;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  114)     private final LoanRepository loanRepository;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  115)     private final ApplicationCurrencyRepositoryWrapper applicationCurrencyRepository;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  116)     private final LoanProductReadPlatformService loanProductReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  117)     private final ClientReadPlatformService clientReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  118)     private final GroupReadPlatformService groupReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  119)     private final LoanTransactionRepository loanTransactionRepository;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  120)     private final LoanDropdownReadPlatformService loanDropdownReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  121)     private final FundReadPlatformService fundReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  122)     private final ChargeReadPlatformService chargeReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  123)     private final CodeValueReadPlatformService codeValueReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  124)     private final CalendarReadPlatformService calendarReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  125)     private final StaffReadPlatformService staffReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  126)     private final PaginationHelper<LoanAccountData> paginationHelper = new PaginationHelper<>();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  127)     private final LoanMapper loaanLoanMapper = new LoanMapper();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  128)     private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  129)     private final DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  130)     private final LoanScheduleGeneratorFactory loanScheduleFactory;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  131) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  132)     @Autowired
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  133)     public LoanReadPlatformServiceImpl(final PlatformSecurityContext context, final LoanRepository loanRepository,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  134)             final LoanTransactionRepository loanTransactionRepository,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  135)             final ApplicationCurrencyRepositoryWrapper applicationCurrencyRepository,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  136)             final LoanProductReadPlatformService loanProductReadPlatformService, final ClientReadPlatformService clientReadPlatformService,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  137)             final GroupReadPlatformService groupReadPlatformService, final LoanDropdownReadPlatformService loanDropdownReadPlatformService,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  138)             final FundReadPlatformService fundReadPlatformService, final ChargeReadPlatformService chargeReadPlatformService,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  139)             final CodeValueReadPlatformService codeValueReadPlatformService, final RoutingDataSource dataSource,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  140)             final CalendarReadPlatformService calendarReadPlatformService, final StaffReadPlatformService staffReadPlatformService,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  141)             final LoanScheduleGeneratorFactory loanScheduleFactory) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  142)         this.context = context;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  143)         this.loanRepository = loanRepository;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  144)         this.loanTransactionRepository = loanTransactionRepository;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  145)         this.applicationCurrencyRepository = applicationCurrencyRepository;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  146)         this.loanProductReadPlatformService = loanProductReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  147)         this.clientReadPlatformService = clientReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  148)         this.groupReadPlatformService = groupReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  149)         this.loanDropdownReadPlatformService = loanDropdownReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  150)         this.fundReadPlatformService = fundReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  151)         this.chargeReadPlatformService = chargeReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  152)         this.codeValueReadPlatformService = codeValueReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  153)         this.calendarReadPlatformService = calendarReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  154)         this.staffReadPlatformService = staffReadPlatformService;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  155)         this.jdbcTemplate = new JdbcTemplate(dataSource);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  156)         this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  157)         this.loanScheduleFactory = loanScheduleFactory;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  158)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  159) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  160)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  161)     public LoanAccountData retrieveOne(final Long loanId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  162) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  163)         try {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  164)             final AppUser currentUser = this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  165)             final String hierarchy = currentUser.getOffice().getHierarchy();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  166)             final String hierarchySearchString = hierarchy + "%";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  167) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  168)             final LoanMapper rm = new LoanMapper();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  169) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  170)             final StringBuilder sqlBuilder = new StringBuilder();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  171)             sqlBuilder.append("select ");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  172)             sqlBuilder.append(rm.loanSchema());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  173)             sqlBuilder.append(" join m_office o on (o.id = c.office_id or o.id = g.office_id) ");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  174)             sqlBuilder.append(" left join m_office transferToOffice on transferToOffice.id = c.transfer_to_office_id ");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  175)             sqlBuilder.append(" where l.id=? and ( o.hierarchy like ? or transferToOffice.hierarchy like ?)");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  176) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  177)             return this.jdbcTemplate.queryForObject(sqlBuilder.toString(), rm, new Object[] { loanId, hierarchySearchString,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  178)                     hierarchySearchString });
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  179)         } catch (final EmptyResultDataAccessException e) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  180)             throw new LoanNotFoundException(loanId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  181)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  182)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  183) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  184)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  185)     public LoanScheduleData retrieveRepaymentSchedule(final Long loanId,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  186)             final RepaymentScheduleRelatedLoanData repaymentScheduleRelatedLoanData, Collection<DisbursementData> disbursementData,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  187)             boolean isInterestRecalculationEnabled) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  188) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  189)         try {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  190)             this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  191) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  192)             final LoanScheduleResultSetExtractor fullResultsetExtractor = new LoanScheduleResultSetExtractor(
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  193)                     repaymentScheduleRelatedLoanData, disbursementData, isInterestRecalculationEnabled);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  194)             final String sql = "select " + fullResultsetExtractor.schema() + " where ls.loan_id = ? order by ls.loan_id, ls.installment";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  195) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  196)             return this.jdbcTemplate.query(sql, fullResultsetExtractor, new Object[] { loanId });
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  197)         } catch (final EmptyResultDataAccessException e) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  198)             throw new LoanNotFoundException(loanId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  199)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  200)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  201) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  202)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  203)     public Collection<LoanTransactionData> retrieveLoanTransactions(final Long loanId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  204)         try {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  205)             this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  206) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  207)             final LoanTransactionsMapper rm = new LoanTransactionsMapper();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  208) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  209)             // retrieve all loan transactions that are not invalid and have not
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  210)             // been 'contra'ed by another transaction
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  211)             // repayments at time of disbursement (e.g. charges)
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  212) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  213)             /*** TODO Vishwas: Remove references to "Contra" from the codebase ***/
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  214)             final String sql = "select "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  215)                     + rm.LoanPaymentsSchema()
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  216)                     + " where tr.loan_id = ? and tr.transaction_type_enum not in (0, 3) and  (tr.is_reversed=0 or tr.manually_adjusted_or_reversed = 1) order by tr.transaction_date ASC,id ";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  217)             return this.jdbcTemplate.query(sql, rm, new Object[] { loanId });
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  218)         } catch (final EmptyResultDataAccessException e) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  219)             return null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  220)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  221)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  222) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  223)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  224)     public Page<LoanAccountData> retrieveAll(final SearchParameters searchParameters) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  225) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  226)         final AppUser currentUser = this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  227)         final String hierarchy = currentUser.getOffice().getHierarchy();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  228)         final String hierarchySearchString = hierarchy + "%";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  229) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  230)         final StringBuilder sqlBuilder = new StringBuilder(200);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  231)         sqlBuilder.append("select SQL_CALC_FOUND_ROWS ");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  232)         sqlBuilder.append(this.loaanLoanMapper.loanSchema());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  233) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  234)         // TODO - for time being this will data scope list of loans returned to
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  235)         // only loans that have a client associated.
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  236)         // to support senario where loan has group_id only OR client_id will
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  237)         // probably require a UNION query
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  238)         // but that at present is an edge case
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  239)         sqlBuilder.append(" join m_office o on o.id = c.office_id");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  240)         sqlBuilder.append(" left join m_office transferToOffice on transferToOffice.id = c.transfer_to_office_id ");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  241)         sqlBuilder.append(" where ( o.hierarchy like ? or transferToOffice.hierarchy like ?)");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  242) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  243)         int arrayPos = 2;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  244)         List<Object> extraCriterias = new ArrayList<>();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  245)         extraCriterias.add(hierarchySearchString);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  246)         extraCriterias.add(hierarchySearchString);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  247) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  248)         String sqlQueryCriteria = searchParameters.getSqlSearch();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  249)         if (StringUtils.isNotBlank(sqlQueryCriteria)) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  250)             sqlQueryCriteria = sqlQueryCriteria.replaceAll("accountNo", "l.account_no");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  251)             sqlBuilder.append(" and (").append(sqlQueryCriteria).append(")");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  252)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  253) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  254)         if (StringUtils.isNotBlank(searchParameters.getExternalId())) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  255)             sqlBuilder.append(" and l.external_id = ?");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  256)             extraCriterias.add(searchParameters.getExternalId());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  257)             arrayPos = arrayPos + 1;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  258)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  259) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  260)         if (StringUtils.isNotBlank(searchParameters.getAccountNo())) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  261)             sqlBuilder.append(" and l.account_no = ?");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  262)             extraCriterias.add(searchParameters.getAccountNo());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  263)             arrayPos = arrayPos + 1;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  264)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  265) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  266)         if (searchParameters.isOrderByRequested()) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  267)             sqlBuilder.append(" order by ").append(searchParameters.getOrderBy());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  268) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  269)             if (searchParameters.isSortOrderProvided()) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  270)                 sqlBuilder.append(' ').append(searchParameters.getSortOrder());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  271)             }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  272)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  273) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  274)         if (searchParameters.isLimited()) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  275)             sqlBuilder.append(" limit ").append(searchParameters.getLimit());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  276)             if (searchParameters.isOffset()) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  277)                 sqlBuilder.append(" offset ").append(searchParameters.getOffset());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  278)             }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  279)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  280) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  281)         final Object[] objectArray = extraCriterias.toArray();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  282)         final Object[] finalObjectArray = Arrays.copyOf(objectArray, arrayPos);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  283)         final String sqlCountRows = "SELECT FOUND_ROWS()";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  284)         return this.paginationHelper.fetchPage(this.jdbcTemplate, sqlCountRows, sqlBuilder.toString(), finalObjectArray,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  285)                 this.loaanLoanMapper);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  286)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  287) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  288)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  289)     public LoanAccountData retrieveTemplateWithClientAndProductDetails(final Long clientId, final Long productId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  290) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  291)         this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  292) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  293)         final ClientData clientAccount = this.clientReadPlatformService.retrieveOne(clientId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  294)         final LocalDate expectedDisbursementDate = DateUtils.getLocalDateOfTenant();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  295)         LoanAccountData loanTemplateDetails = LoanAccountData.clientDefaults(clientAccount.id(), clientAccount.displayName(),
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  296)                 clientAccount.officeId(), expectedDisbursementDate);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  297) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  298)         if (productId != null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  299)             final LoanProductData selectedProduct = this.loanProductReadPlatformService.retrieveLoanProduct(productId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  300)             loanTemplateDetails = LoanAccountData.populateLoanProductDefaults(loanTemplateDetails, selectedProduct);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  301)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  302) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  303)         return loanTemplateDetails;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  304)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  305) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  306)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  307)     public LoanAccountData retrieveTemplateWithGroupAndProductDetails(final Long groupId, final Long productId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  308) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  309)         this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  310) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  311)         final GroupGeneralData groupAccount = this.groupReadPlatformService.retrieveOne(groupId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  312)         final LocalDate expectedDisbursementDate = DateUtils.getLocalDateOfTenant();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  313)         LoanAccountData loanDetails = LoanAccountData.groupDefaults(groupAccount, expectedDisbursementDate);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  314) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  315)         if (productId != null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  316)             final LoanProductData selectedProduct = this.loanProductReadPlatformService.retrieveLoanProduct(productId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  317)             loanDetails = LoanAccountData.populateLoanProductDefaults(loanDetails, selectedProduct);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  318)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  319) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  320)         return loanDetails;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  321)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  322) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  323)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  324)     public LoanAccountData retrieveTemplateWithCompleteGroupAndProductDetails(final Long groupId, final Long productId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  325) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  326)         this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  327) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  328)         GroupGeneralData groupAccount = this.groupReadPlatformService.retrieveOne(groupId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  329)         // get group associations
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  330)         final Collection<ClientData> membersOfGroup = this.clientReadPlatformService.retrieveClientMembersOfGroup(groupId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  331)         if (!CollectionUtils.isEmpty(membersOfGroup)) {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  332)             final Collection<ClientData> activeClientMembers = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  333)             final Collection<CalendarData> calendarsData = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  334)             final CalendarData collectionMeetingCalendar = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  335)             final Collection<GroupRoleData> groupRoles = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  336)             groupAccount = GroupGeneralData.withAssocations(groupAccount, membersOfGroup, activeClientMembers, groupRoles, calendarsData,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  337)                     collectionMeetingCalendar);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  338)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  339) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  340)         final LocalDate expectedDisbursementDate = DateUtils.getLocalDateOfTenant();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  341)         LoanAccountData loanDetails = LoanAccountData.groupDefaults(groupAccount, expectedDisbursementDate);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  342) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  343)         if (productId != null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  344)             final LoanProductData selectedProduct = this.loanProductReadPlatformService.retrieveLoanProduct(productId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  345)             loanDetails = LoanAccountData.populateLoanProductDefaults(loanDetails, selectedProduct);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  346)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  347) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  348)         return loanDetails;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  349)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  350) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  351)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  352)     public LoanTransactionData retrieveLoanTransactionTemplate(final Long loanId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  353) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  354)         this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  355) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  356)         // TODO - KW - OPTIMIZE - write simple sql query to fetch back date of
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  357)         // possible next transaction date.
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100  358)         logger.info("##################### DEBUG  1: {}", loanId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  359)         final Loan loan = this.loanRepository.findOne(loanId);
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100  360)         logger.info("##################### DEBUG  2: {}", loan);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  361)         if (loan == null) { throw new LoanNotFoundException(loanId); }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  362) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  363)         final MonetaryCurrency currency = loan.getCurrency();
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100  364)         logger.info("##################### DEBUG  3: {}", currency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  365)         final ApplicationCurrency applicationCurrency = this.applicationCurrencyRepository.findOneWithNotFoundDetection(currency);
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100  366)         logger.info("##################### DEBUG  4: {}", applicationCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  367) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  368)         final CurrencyData currencyData = applicationCurrency.toData();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  369) 
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100  370)         logger.info("##################### DEBUG  5: {}", currencyData);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  371)         final LocalDate earliestUnpaidInstallmentDate = loan.possibleNextRepaymentDate();
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100  372)         logger.info("##################### DEBUG  6: {}", earliestUnpaidInstallmentDate);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  373) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  374)         final LoanRepaymentScheduleInstallment loanRepaymentScheduleInstallment = loan.possibleNextRepaymentInstallment();
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100  375)         logger.info("##################### DEBUG  7: {}", loanRepaymentScheduleInstallment);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  376)         final LoanTransactionEnumData transactionType = LoanEnumerations.transactionType(LoanTransactionType.REPAYMENT);
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100  377)         logger.info("##################### DEBUG  8: {}", transactionType);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  378)         final Collection<CodeValueData> paymentOptions = this.codeValueReadPlatformService
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  379)                 .retrieveCodeValuesByCode(PaymentDetailConstants.paymentTypeCodeName);
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100  380)         logger.info("##################### DEBUG  9: {}", paymentOptions);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  381)         final BigDecimal outstandingLoanBalance = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  382)         final BigDecimal unrecognizedIncomePortion = null;
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  383) 		LoanTransactionData result;
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  384) 		if (loanRepaymentScheduleInstallment != null) {
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  385) 			result = new LoanTransactionData(null, null, null, transactionType, null, currencyData, earliestUnpaidInstallmentDate,
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  386) 					loanRepaymentScheduleInstallment.getTotalOutstanding(currency).getAmount(), loanRepaymentScheduleInstallment
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  387) 					.getPrincipalOutstanding(currency).getAmount(), loanRepaymentScheduleInstallment.getInterestOutstanding(currency)
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  388) 					.getAmount(), loanRepaymentScheduleInstallment.getFeeChargesOutstanding(currency).getAmount(),
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  389) 					loanRepaymentScheduleInstallment.getPenaltyChargesOutstanding(currency).getAmount(), null, unrecognizedIncomePortion,
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  390) 					paymentOptions, null, null, null, outstandingLoanBalance, false);
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  391) 		} else {
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  392) 			BigDecimal zero = BigDecimal.ZERO;
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  393) 			result = new LoanTransactionData(null, null, null, transactionType, null, currencyData, earliestUnpaidInstallmentDate,
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  394) 					zero, zero, zero, zero, zero, null, unrecognizedIncomePortion, paymentOptions, null, null, null, outstandingLoanBalance, false);
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  395) 		}
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  396) 
b7512618 (Frank Nkuyahaga      2018-06-12 09:57:37 +0300  397) 		logger.info("##################### DEBUG 10: {}", result);
7697e861 (Aleksandar Vidakovic 2015-08-03 15:04:30 +0100  398)         return result;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  399)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  400) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  401)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  402)     public LoanTransactionData retrieveLoanPrePaymentTemplate(final Long loanId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  403) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  404)         this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  405) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  406)         final Loan loan = this.loanRepository.findOne(loanId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  407)         if (loan == null) { throw new LoanNotFoundException(loanId); }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  408) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  409)         final MonetaryCurrency currency = loan.getCurrency();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  410)         final ApplicationCurrency applicationCurrency = this.applicationCurrencyRepository.findOneWithNotFoundDetection(currency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  411) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  412)         final CurrencyData currencyData = applicationCurrency.toData();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  413) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  414)         final LocalDate earliestUnpaidInstallmentDate = LocalDate.now();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  415) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  416)         final LoanRepaymentScheduleInstallment loanRepaymentScheduleInstallment = loan.fetchPrepaymentDetail(this.loanScheduleFactory);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  417)         final LoanTransactionEnumData transactionType = LoanEnumerations.transactionType(LoanTransactionType.REPAYMENT);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  418)         final Collection<CodeValueData> paymentOptions = this.codeValueReadPlatformService
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  419)                 .retrieveCodeValuesByCode(PaymentDetailConstants.paymentTypeCodeName);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  420)         final BigDecimal outstandingLoanBalance = loanRepaymentScheduleInstallment.getPrincipalOutstanding(currency).getAmount();
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  421)         final BigDecimal unrecognizedIncomePortion = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  422)         return new LoanTransactionData(null, null, null, transactionType, null, currencyData, earliestUnpaidInstallmentDate,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  423)                 loanRepaymentScheduleInstallment.getTotalOutstanding(currency).getAmount(), loanRepaymentScheduleInstallment
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  424)                         .getPrincipalOutstanding(currency).getAmount(), loanRepaymentScheduleInstallment.getInterestOutstanding(currency)
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  425)                         .getAmount(), loanRepaymentScheduleInstallment.getFeeChargesOutstanding(currency).getAmount(),
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  426)                 loanRepaymentScheduleInstallment.getPenaltyChargesOutstanding(currency).getAmount(), null, unrecognizedIncomePortion,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  427)                 paymentOptions, null, null, null, outstandingLoanBalance, false);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  428)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  429) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  430)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  431)     public LoanTransactionData retrieveWaiveInterestDetails(final Long loanId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  432) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  433)         AppUser currentUser = this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  434) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  435)         // TODO - KW -OPTIMIZE - write simple sql query to fetch back overdue
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  436)         // interest that can be waived along with the date of repayment period
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  437)         // interest is overdue.
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  438)         final Loan loan = this.loanRepository.findOne(loanId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  439)         if (loan == null) { throw new LoanNotFoundException(loanId); }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  440) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  441)         final MonetaryCurrency currency = loan.getCurrency();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  442)         final ApplicationCurrency applicationCurrency = this.applicationCurrencyRepository.findOneWithNotFoundDetection(currency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  443)         final CurrencyData currencyData = applicationCurrency.toData();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  444) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  445)         final LoanTransaction waiveOfInterest = loan.deriveDefaultInterestWaiverTransaction(DateUtils.getLocalDateTimeOfTenant(),
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  446)                 currentUser);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  447) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  448)         final LoanTransactionEnumData transactionType = LoanEnumerations.transactionType(LoanTransactionType.WAIVE_INTEREST);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  449) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  450)         final BigDecimal amount = waiveOfInterest.getAmount(currency).getAmount();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  451)         final BigDecimal outstandingLoanBalance = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  452)         final BigDecimal unrecognizedIncomePortion = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  453)         return new LoanTransactionData(null, null, null, transactionType, null, currencyData, waiveOfInterest.getTransactionDate(), amount,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  454)                 null, null, null, null, null, null, null, null, outstandingLoanBalance, unrecognizedIncomePortion, false);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  455)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  456) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  457)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  458)     public LoanTransactionData retrieveNewClosureDetails() {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  459) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  460)         this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  461)         final BigDecimal outstandingLoanBalance = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  462)         final LoanTransactionEnumData transactionType = LoanEnumerations.transactionType(LoanTransactionType.WRITEOFF);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  463)         final BigDecimal unrecognizedIncomePortion = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  464)         return new LoanTransactionData(null, null, null, transactionType, null, null, DateUtils.getLocalDateOfTenant(), null, null, null,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  465)                 null, null, null, null, null, null, outstandingLoanBalance, unrecognizedIncomePortion, false);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  466) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  467)     }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  468) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  469)     @Override
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  470)     public LoanApprovalData retrieveApprovalTemplate(final Long loanId) {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  471) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  472)         final Loan loan = this.loanRepository.findOne(loanId);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  473)         if (loan == null) { throw new LoanNotFoundException(loanId); }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  474) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  475)         return new LoanApprovalData(loan.getProposedPrincipal(), DateUtils.getLocalDateOfTenant());
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  476) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  477)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  478) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  479)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  480)     public LoanTransactionData retrieveDisbursalTemplate(final Long loanId, boolean paymentDetailsRequired) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  481)         final Loan loan = this.loanRepository.findOne(loanId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  482)         if (loan == null) { throw new LoanNotFoundException(loanId); }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  483)         final LoanTransactionEnumData transactionType = LoanEnumerations.transactionType(LoanTransactionType.DISBURSEMENT);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  484)         Collection<CodeValueData> paymentOptions = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  485)         if (paymentDetailsRequired) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  486)             paymentOptions = this.codeValueReadPlatformService.retrieveCodeValuesByCode(PaymentDetailConstants.paymentTypeCodeName);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  487)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  488)         final BigDecimal outstandingLoanBalance = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  489)         final BigDecimal unrecognizedIncomePortion = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  490)         return new LoanTransactionData(null, null, null, transactionType, null, null, loan.getExpectedDisbursedOnLocalDateForTemplate(),
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  491)                 loan.getDisburseAmountForTemplate(), null, null, null, null, null, unrecognizedIncomePortion, paymentOptions, null, null,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  492)                 loan.retriveLastEmiAmount(), outstandingLoanBalance, false);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  493) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  494)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  495) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  496)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  497)     public LoanTransactionData retrieveLoanTransaction(final Long loanId, final Long transactionId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  498) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  499)         this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  500) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  501)         final Loan loan = this.loanRepository.findOne(loanId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  502)         if (loan == null) { throw new LoanNotFoundException(loanId); }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  503) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  504)         final MonetaryCurrency currency = loan.getCurrency();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  505)         final ApplicationCurrency applicationCurrency = this.applicationCurrencyRepository.findOneWithNotFoundDetection(currency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  506)         final CurrencyData currencyData = applicationCurrency.toData();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  507) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  508)         final LoanTransaction transaction = this.loanTransactionRepository.findOne(transactionId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  509)         if (transaction == null) { throw new LoanTransactionNotFoundException(transactionId); }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  510) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  511)         if (transaction.isNotBelongingToLoanOf(loan)) { throw new LoanTransactionNotFoundException(transactionId, loanId); }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  512) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  513)         final LoanTransactionsAccountTransferMapper trasfermapper = new LoanTransactionsAccountTransferMapper();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  514)         final String sql = "select " + trasfermapper.accountTransferSchema() + " where tr.loan_id = ? and tr.id = ?";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  515)         final AccountTransferData accountTransferData = this.jdbcTemplate.queryForObject(sql, trasfermapper, loanId, transactionId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  516)         return transaction.toData(currencyData, accountTransferData);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  517)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  518) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  519)     private static final class LoanMapper implements RowMapper<LoanAccountData> {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  520) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  521)         public String loanSchema() {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  522)             return "l.id as id, l.account_no as accountNo, l.external_id as externalId, l.fund_id as fundId, f.name as fundName,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  523)                     + " l.loan_type_enum as loanType, l.loanpurpose_cv_id as loanPurposeId, cv.code_value as loanPurposeName,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  524)                     + " lp.id as loanProductId, lp.name as loanProductName, lp.description as loanProductDescription,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  525)                     + " lp.allow_multiple_disbursals as multiDisburseLoan,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  526)                     + " c.id as clientId, c.display_name as clientName, c.office_id as clientOfficeId,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  527)                     + " g.id as groupId, g.display_name as groupName,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  528)                     + " g.office_id as groupOfficeId, g.staff_id As groupStaffId , g.parent_id as groupParentId, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  529)                     + " g.hierarchy As groupHierarchy , g.external_id As groupExternalId, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  530)                     + " g.status_enum as statusEnum, g.activation_date as activationDate, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  531)                     + " l.submittedon_date as submittedOnDate, sbu.username as submittedByUsername, sbu.firstname as submittedByFirstname, sbu.lastname as submittedByLastname,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  532)                     + " l.rejectedon_date as rejectedOnDate, rbu.username as rejectedByUsername, rbu.firstname as rejectedByFirstname, rbu.lastname as rejectedByLastname,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  533)                     + " l.withdrawnon_date as withdrawnOnDate, wbu.username as withdrawnByUsername, wbu.firstname as withdrawnByFirstname, wbu.lastname as withdrawnByLastname,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  534)                     + " l.approvedon_date as approvedOnDate, abu.username as approvedByUsername, abu.firstname as approvedByFirstname, abu.lastname as approvedByLastname,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  535)                     + " l.expected_disbursedon_date as expectedDisbursementDate, l.disbursedon_date as actualDisbursementDate, dbu.username as disbursedByUsername, dbu.firstname as disbursedByFirstname, dbu.lastname as disbursedByLastname,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  536)                     + " l.closedon_date as closedOnDate, cbu.username as closedByUsername, cbu.firstname as closedByFirstname, cbu.lastname as closedByLastname, l.writtenoffon_date as writtenOffOnDate, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  537)                     + " l.expected_firstrepaymenton_date as expectedFirstRepaymentOnDate, l.interest_calculated_from_date as interestChargedFromDate, l.expected_maturedon_date as expectedMaturityDate, "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  538)                     + " l.principal_amount_proposed as proposedPrincipal, l.principal_amount as principal, l.approved_principal as approvedPrincipal, l.arrearstolerance_amount as inArrearsTolerance, l.number_of_repayments as numberOfRepayments, l.repay_every as repaymentEvery,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  539)                     + " l.grace_on_principal_periods as graceOnPrincipalPayment, l.grace_on_interest_periods as graceOnInterestPayment, l.grace_interest_free_periods as graceOnInterestCharged,l.grace_on_arrears_ageing as graceOnArrearsAgeing,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  540)                     + " l.nominal_interest_rate_per_period as interestRatePerPeriod, l.annual_nominal_interest_rate as annualInterestRate, "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  541)                     + " l.repayment_period_frequency_enum as repaymentFrequencyType, l.repayment_frequency_nth_day_enum as repaymentFrequencyNthDayType, l.repayment_frequency_day_of_week_enum as repaymentFrequencyDayOfWeekType, l.interest_period_frequency_enum as interestRateFrequencyType, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  542)                     + " l.term_frequency as termFrequency, l.term_period_frequency_enum as termPeriodFrequencyType, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  543)                     + " l.amortization_method_enum as amortizationType, l.interest_method_enum as interestType, l.interest_calculated_in_period_enum as interestCalculationPeriodType,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  544)                     + " l.loan_status_id as lifeCycleStatusId, l.loan_transaction_strategy_id as transactionStrategyId, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  545)                     + " lps.name as transactionStrategyName, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  546)                     + " l.currency_code as currencyCode, l.currency_digits as currencyDigits, l.currency_multiplesof as inMultiplesOf, rc.`name` as currencyName, rc.display_symbol as currencyDisplaySymbol, rc.internationalized_name_code as currencyNameCode, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  547)                     + " l.loan_officer_id as loanOfficerId, s.display_name as loanOfficerName, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  548)                     + " l.principal_disbursed_derived as principalDisbursed,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  549)                     + " l.principal_repaid_derived as principalPaid,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  550)                     + " l.principal_writtenoff_derived as principalWrittenOff,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  551)                     + " l.principal_outstanding_derived as principalOutstanding,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  552)                     + " l.interest_charged_derived as interestCharged,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  553)                     + " l.interest_repaid_derived as interestPaid,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  554)                     + " l.interest_waived_derived as interestWaived,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  555)                     + " l.interest_writtenoff_derived as interestWrittenOff,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  556)                     + " l.interest_outstanding_derived as interestOutstanding,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  557)                     + " l.fee_charges_charged_derived as feeChargesCharged,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  558)                     + " l.total_charges_due_at_disbursement_derived as feeChargesDueAtDisbursementCharged,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  559)                     + " l.fee_charges_repaid_derived as feeChargesPaid,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  560)                     + " l.fee_charges_waived_derived as feeChargesWaived,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  561)                     + " l.fee_charges_writtenoff_derived as feeChargesWrittenOff,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  562)                     + " l.fee_charges_outstanding_derived as feeChargesOutstanding,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  563)                     + " l.penalty_charges_charged_derived as penaltyChargesCharged,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  564)                     + " l.penalty_charges_repaid_derived as penaltyChargesPaid,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  565)                     + " l.penalty_charges_waived_derived as penaltyChargesWaived,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  566)                     + " l.penalty_charges_writtenoff_derived as penaltyChargesWrittenOff,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  567)                     + " l.penalty_charges_outstanding_derived as penaltyChargesOutstanding,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  568)                     + " l.total_expected_repayment_derived as totalExpectedRepayment,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  569)                     + " l.total_repayment_derived as totalRepayment,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  570)                     + " l.total_expected_costofloan_derived as totalExpectedCostOfLoan,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  571)                     + " l.total_costofloan_derived as totalCostOfLoan,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  572)                     + " l.total_waived_derived as totalWaived,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  573)                     + " l.total_writtenoff_derived as totalWrittenOff,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  574)                     + " l.total_outstanding_derived as totalOutstanding,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  575)                     + " l.total_overpaid_derived as totalOverpaid,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  576)                     + " l.fixed_emi_amount as fixedEmiAmount,"
94ec2995 (Aleksandar Vidakovic 2015-08-24 14:03:52 +0100  577)                     + " l.watchlist as watchlist,"
34276f03 (Alex Litvinenko      2017-07-03 21:15:25 +0300  578)                     + " l.paused_lpi as pausedLPI,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  579)                     + " l.max_outstanding_loan_balance as outstandingLoanBalance,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  580)                     + " la.principal_overdue_derived as principalOverdue,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  581)                     + " la.interest_overdue_derived as interestOverdue,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  582)                     + " la.fee_charges_overdue_derived as feeChargesOverdue,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  583)                     + " la.penalty_charges_overdue_derived as penaltyChargesOverdue,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  584)                     + " la.total_overdue_derived as totalOverdue,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  585)                     + " la.overdue_since_date_derived as overdueSinceDate,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  586)                     + " l.sync_disbursement_with_meeting as syncDisbursementWithMeeting,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  587)                     + " l.loan_counter as loanCounter, l.loan_product_counter as loanProductCounter,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  588)                     + " l.is_npa as isNPA, l.days_in_month_enum as daysInMonth, l.days_in_year_enum as daysInYear, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  589)                     + " l.interest_recalculation_enabled as isInterestRecalculationEnabled, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  590)                     + " lir.id as lirId, lir.loan_id as loanId, lir.compound_type_enum as compoundType, lir.reschedule_strategy_enum as rescheduleStrategy, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  591)                     + " lir.rest_frequency_type_enum as restFrequencyEnum, lir.rest_frequency_interval as restFrequencyInterval, "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  592)                     + " lir.rest_freqency_date as restFrequencyDate, "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  593)                     + " l.create_standing_instruction_at_disbursement as createStandingInstructionAtDisbursement "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  594)                     + " from m_loan l" //
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  595)                     + " join m_product_loan lp on lp.id = l.product_id" //
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  596)                     + " left join m_loan_recalculation_details lir on lir.loan_id = l.id "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  597)                     + " join m_currency rc on rc.`code` = l.currency_code" //
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  598)                     + " left join m_client c on c.id = l.client_id" //
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  599)                     + " left join m_group g on g.id = l.group_id" //
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  600)                     + " left join m_loan_arrears_aging la on la.loan_id = l.id" //
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  601)                     + " left join m_fund f on f.id = l.fund_id" //
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  602)                     + " left join m_staff s on s.id = l.loan_officer_id" //
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  603)                     + " left join m_appuser sbu on sbu.id = l.submittedon_userid"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  604)                     + " left join m_appuser rbu on rbu.id = l.rejectedon_userid"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  605)                     + " left join m_appuser wbu on wbu.id = l.withdrawnon_userid"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  606)                     + " left join m_appuser abu on abu.id = l.approvedon_userid"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  607)                     + " left join m_appuser dbu on dbu.id = l.disbursedon_userid"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  608)                     + " left join m_appuser cbu on cbu.id = l.closedon_userid"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  609)                     + " left join m_code_value cv on cv.id = l.loanpurpose_cv_id"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  610)                     + " left join ref_loan_transaction_processing_strategy lps on lps.id = l.loan_transaction_strategy_id";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  611)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  612) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  613)         @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  614)         public LoanAccountData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  615) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  616)             final String currencyCode = rs.getString("currencyCode");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  617)             final String currencyName = rs.getString("currencyName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  618)             final String currencyNameCode = rs.getString("currencyNameCode");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  619)             final String currencyDisplaySymbol = rs.getString("currencyDisplaySymbol");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  620)             final Integer currencyDigits = JdbcSupport.getInteger(rs, "currencyDigits");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  621)             final Integer inMultiplesOf = JdbcSupport.getInteger(rs, "inMultiplesOf");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  622)             final CurrencyData currencyData = new CurrencyData(currencyCode, currencyName, currencyDigits, inMultiplesOf,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  623)                     currencyDisplaySymbol, currencyNameCode);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  624) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  625)             final Long id = rs.getLong("id");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  626)             final String accountNo = rs.getString("accountNo");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  627)             final String externalId = rs.getString("externalId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  628) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  629)             final Long clientId = JdbcSupport.getLong(rs, "clientId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  630)             final Long clientOfficeId = JdbcSupport.getLong(rs, "clientOfficeId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  631)             final String clientName = rs.getString("clientName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  632) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  633)             final Long groupId = JdbcSupport.getLong(rs, "groupId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  634)             final String groupName = rs.getString("groupName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  635)             final String groupExternalId = rs.getString("groupExternalId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  636)             final Long groupOfficeId = JdbcSupport.getLong(rs, "groupOfficeId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  637)             final Long groupStaffId = JdbcSupport.getLong(rs, "groupStaffId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  638)             final Long groupParentId = JdbcSupport.getLong(rs, "groupParentId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  639)             final String groupHierarchy = rs.getString("groupHierarchy");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  640) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  641)             final Integer loanTypeId = JdbcSupport.getInteger(rs, "loanType");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  642)             final EnumOptionData loanType = AccountEnumerations.loanType(loanTypeId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  643) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  644)             final Long fundId = JdbcSupport.getLong(rs, "fundId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  645)             final String fundName = rs.getString("fundName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  646) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  647)             final Long loanOfficerId = JdbcSupport.getLong(rs, "loanOfficerId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  648)             final String loanOfficerName = rs.getString("loanOfficerName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  649) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  650)             final Long loanPurposeId = JdbcSupport.getLong(rs, "loanPurposeId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  651)             final String loanPurposeName = rs.getString("loanPurposeName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  652) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  653)             final Long loanProductId = JdbcSupport.getLong(rs, "loanProductId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  654)             final String loanProductName = rs.getString("loanProductName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  655)             final String loanProductDescription = rs.getString("loanProductDescription");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  656)             final Boolean multiDisburseLoan = rs.getBoolean("multiDisburseLoan");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  657)             final BigDecimal outstandingLoanBalance = rs.getBigDecimal("outstandingLoanBalance");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  658) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  659)             final LocalDate submittedOnDate = JdbcSupport.getLocalDate(rs, "submittedOnDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  660)             final String submittedByUsername = rs.getString("submittedByUsername");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  661)             final String submittedByFirstname = rs.getString("submittedByFirstname");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  662)             final String submittedByLastname = rs.getString("submittedByLastname");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  663) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  664)             final LocalDate rejectedOnDate = JdbcSupport.getLocalDate(rs, "rejectedOnDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  665)             final String rejectedByUsername = rs.getString("rejectedByUsername");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  666)             final String rejectedByFirstname = rs.getString("rejectedByFirstname");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  667)             final String rejectedByLastname = rs.getString("rejectedByLastname");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  668) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  669)             final LocalDate withdrawnOnDate = JdbcSupport.getLocalDate(rs, "withdrawnOnDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  670)             final String withdrawnByUsername = rs.getString("withdrawnByUsername");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  671)             final String withdrawnByFirstname = rs.getString("withdrawnByFirstname");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  672)             final String withdrawnByLastname = rs.getString("withdrawnByLastname");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  673) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  674)             final LocalDate approvedOnDate = JdbcSupport.getLocalDate(rs, "approvedOnDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  675)             final String approvedByUsername = rs.getString("approvedByUsername");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  676)             final String approvedByFirstname = rs.getString("approvedByFirstname");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  677)             final String approvedByLastname = rs.getString("approvedByLastname");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  678) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  679)             final LocalDate expectedDisbursementDate = JdbcSupport.getLocalDate(rs, "expectedDisbursementDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  680)             final LocalDate actualDisbursementDate = JdbcSupport.getLocalDate(rs, "actualDisbursementDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  681)             final String disbursedByUsername = rs.getString("disbursedByUsername");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  682)             final String disbursedByFirstname = rs.getString("disbursedByFirstname");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  683)             final String disbursedByLastname = rs.getString("disbursedByLastname");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  684) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  685)             final LocalDate closedOnDate = JdbcSupport.getLocalDate(rs, "closedOnDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  686)             final String closedByUsername = rs.getString("closedByUsername");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  687)             final String closedByFirstname = rs.getString("closedByFirstname");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  688)             final String closedByLastname = rs.getString("closedByLastname");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  689) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  690)             final LocalDate writtenOffOnDate = JdbcSupport.getLocalDate(rs, "writtenOffOnDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  691) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  692)             final LocalDate expectedMaturityDate = JdbcSupport.getLocalDate(rs, "expectedMaturityDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  693) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  694)             final LoanApplicationTimelineData timeline = new LoanApplicationTimelineData(submittedOnDate, submittedByUsername,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  695)                     submittedByFirstname, submittedByLastname, rejectedOnDate, rejectedByUsername, rejectedByFirstname, rejectedByLastname,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  696)                     withdrawnOnDate, withdrawnByUsername, withdrawnByFirstname, withdrawnByLastname, approvedOnDate, approvedByUsername,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  697)                     approvedByFirstname, approvedByLastname, expectedDisbursementDate, actualDisbursementDate, disbursedByUsername,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  698)                     disbursedByFirstname, disbursedByLastname, closedOnDate, closedByUsername, closedByFirstname, closedByLastname,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  699)                     expectedMaturityDate, writtenOffOnDate, closedByUsername, closedByFirstname, closedByLastname);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  700) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  701)             final BigDecimal principal = rs.getBigDecimal("principal");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  702)             final BigDecimal approvedPrincipal = rs.getBigDecimal("approvedPrincipal");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  703)             final BigDecimal proposedPrincipal = rs.getBigDecimal("proposedPrincipal");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  704)             final BigDecimal totalOverpaid = rs.getBigDecimal("totalOverpaid");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  705)             final BigDecimal inArrearsTolerance = rs.getBigDecimal("inArrearsTolerance");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  706) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  707)             final Integer numberOfRepayments = JdbcSupport.getInteger(rs, "numberOfRepayments");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  708)             final Integer repaymentEvery = JdbcSupport.getInteger(rs, "repaymentEvery");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  709)             final BigDecimal interestRatePerPeriod = rs.getBigDecimal("interestRatePerPeriod");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  710)             final BigDecimal annualInterestRate = rs.getBigDecimal("annualInterestRate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  711) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  712)             final Integer graceOnPrincipalPayment = JdbcSupport.getIntegerDefaultToNullIfZero(rs, "graceOnPrincipalPayment");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  713)             final Integer graceOnInterestPayment = JdbcSupport.getIntegerDefaultToNullIfZero(rs, "graceOnInterestPayment");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  714)             final Integer graceOnInterestCharged = JdbcSupport.getIntegerDefaultToNullIfZero(rs, "graceOnInterestCharged");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  715)             final Integer graceOnArrearsAgeing = JdbcSupport.getIntegerDefaultToNullIfZero(rs, "graceOnArrearsAgeing");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  716) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  717)             final Integer termFrequency = JdbcSupport.getInteger(rs, "termFrequency");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  718)             final Integer termPeriodFrequencyTypeInt = JdbcSupport.getInteger(rs, "termPeriodFrequencyType");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  719)             final EnumOptionData termPeriodFrequencyType = LoanEnumerations.termFrequencyType(termPeriodFrequencyTypeInt);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  720) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  721)             final int repaymentFrequencyTypeInt = JdbcSupport.getInteger(rs, "repaymentFrequencyType");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  722)             final EnumOptionData repaymentFrequencyType = LoanEnumerations.repaymentFrequencyType(repaymentFrequencyTypeInt);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  723) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  724)             final Integer repaymentFrequencyNthDayTypeInt = JdbcSupport.getInteger(rs, "repaymentFrequencyNthDayType");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  725)             final EnumOptionData repaymentFrequencyNthDayType = LoanEnumerations
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  726)                     .repaymentFrequencyNthDayType(repaymentFrequencyNthDayTypeInt);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  727) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  728)             final Integer repaymentFrequencyDayOfWeekTypeInt = JdbcSupport.getInteger(rs, "repaymentFrequencyDayOfWeekType");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  729)             final EnumOptionData repaymentFrequencyDayOfWeekType = LoanEnumerations
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  730)                     .repaymentFrequencyDayOfWeekType(repaymentFrequencyDayOfWeekTypeInt);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  731) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  732)             final int interestRateFrequencyTypeInt = JdbcSupport.getInteger(rs, "interestRateFrequencyType");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  733)             final EnumOptionData interestRateFrequencyType = LoanEnumerations.interestRateFrequencyType(interestRateFrequencyTypeInt);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  734) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  735)             final Long transactionStrategyId = JdbcSupport.getLong(rs, "transactionStrategyId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  736)             final String transactionStrategyName = rs.getString("transactionStrategyName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  737) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  738)             final int amortizationTypeInt = JdbcSupport.getInteger(rs, "amortizationType");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  739)             final int interestTypeInt = JdbcSupport.getInteger(rs, "interestType");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  740)             final int interestCalculationPeriodTypeInt = JdbcSupport.getInteger(rs, "interestCalculationPeriodType");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  741) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  742)             final EnumOptionData amortizationType = LoanEnumerations.amortizationType(amortizationTypeInt);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  743)             final EnumOptionData interestType = LoanEnumerations.interestType(interestTypeInt);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  744)             final EnumOptionData interestCalculationPeriodType = LoanEnumerations
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  745)                     .interestCalculationPeriodType(interestCalculationPeriodTypeInt);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  746) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  747)             final Integer lifeCycleStatusId = JdbcSupport.getInteger(rs, "lifeCycleStatusId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  748)             final LoanStatusEnumData status = LoanEnumerations.status(lifeCycleStatusId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  749) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  750)             // settings
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  751)             final LocalDate expectedFirstRepaymentOnDate = JdbcSupport.getLocalDate(rs, "expectedFirstRepaymentOnDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  752)             final LocalDate interestChargedFromDate = JdbcSupport.getLocalDate(rs, "interestChargedFromDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  753) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  754)             final Boolean syncDisbursementWithMeeting = rs.getBoolean("syncDisbursementWithMeeting");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  755) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  756)             final BigDecimal feeChargesDueAtDisbursementCharged = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  757)                     "feeChargesDueAtDisbursementCharged");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  758)             LoanSummaryData loanSummary = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  759)             Boolean inArrears = false;
afa97884 (Alex Litvinenko      2015-02-16 16:40:52 +0200  760)             Integer daysInArrears = 0;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  761)             if (status.id().intValue() >= 300) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  762) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  763)                 // loan summary
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  764)                 final BigDecimal principalDisbursed = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalDisbursed");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  765)                 final BigDecimal principalPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalPaid");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  766)                 final BigDecimal principalWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalWrittenOff");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  767)                 final BigDecimal principalOutstanding = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalOutstanding");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  768)                 final BigDecimal principalOverdue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalOverdue");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  769) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  770)                 final BigDecimal interestCharged = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestCharged");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  771)                 final BigDecimal interestPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestPaid");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  772)                 final BigDecimal interestWaived = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestWaived");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  773)                 final BigDecimal interestWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestWrittenOff");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  774)                 final BigDecimal interestOutstanding = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestOutstanding");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  775)                 final BigDecimal interestOverdue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestOverdue");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  776) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  777)                 final BigDecimal feeChargesCharged = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesCharged");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  778)                 final BigDecimal feeChargesPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesPaid");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  779)                 final BigDecimal feeChargesWaived = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesWaived");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  780)                 final BigDecimal feeChargesWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesWrittenOff");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  781)                 final BigDecimal feeChargesOutstanding = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesOutstanding");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  782)                 final BigDecimal feeChargesOverdue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesOverdue");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  783) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  784)                 final BigDecimal penaltyChargesCharged = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "penaltyChargesCharged");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  785)                 final BigDecimal penaltyChargesPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "penaltyChargesPaid");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  786)                 final BigDecimal penaltyChargesWaived = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "penaltyChargesWaived");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  787)                 final BigDecimal penaltyChargesWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "penaltyChargesWrittenOff");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  788)                 final BigDecimal penaltyChargesOutstanding = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "penaltyChargesOutstanding");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  789)                 final BigDecimal penaltyChargesOverdue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "penaltyChargesOverdue");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  790) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  791)                 final BigDecimal totalExpectedRepayment = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "totalExpectedRepayment");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  792)                 final BigDecimal totalRepayment = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "totalRepayment");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  793)                 final BigDecimal totalExpectedCostOfLoan = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "totalExpectedCostOfLoan");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  794)                 final BigDecimal totalCostOfLoan = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "totalCostOfLoan");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  795)                 final BigDecimal totalWaived = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "totalWaived");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  796)                 final BigDecimal totalWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "totalWrittenOff");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  797)                 final BigDecimal totalOutstanding = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "totalOutstanding");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  798)                 final BigDecimal totalOverdue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "totalOverdue");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  799) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  800)                 final LocalDate overdueSinceDate = JdbcSupport.getLocalDate(rs, "overdueSinceDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  801)                 if (overdueSinceDate != null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  802)                     inArrears = true;
afa97884 (Alex Litvinenko      2015-02-16 16:40:52 +0200  803)                     Days days = Days.daysBetween(overdueSinceDate, LocalDate.now());
afa97884 (Alex Litvinenko      2015-02-16 16:40:52 +0200  804)                     daysInArrears = days.getDays();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  805)                 }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  806) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  807)                 loanSummary = new LoanSummaryData(currencyData, principalDisbursed, principalPaid, principalWrittenOff,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  808)                         principalOutstanding, principalOverdue, interestCharged, interestPaid, interestWaived, interestWrittenOff,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  809)                         interestOutstanding, interestOverdue, feeChargesCharged, feeChargesDueAtDisbursementCharged, feeChargesPaid,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  810)                         feeChargesWaived, feeChargesWrittenOff, feeChargesOutstanding, feeChargesOverdue, penaltyChargesCharged,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  811)                         penaltyChargesPaid, penaltyChargesWaived, penaltyChargesWrittenOff, penaltyChargesOutstanding,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  812)                         penaltyChargesOverdue, totalExpectedRepayment, totalRepayment, totalExpectedCostOfLoan, totalCostOfLoan,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  813)                         totalWaived, totalWrittenOff, totalOutstanding, totalOverdue, overdueSinceDate);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  814)             }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  815) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  816)             GroupGeneralData groupData = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  817)             if (groupId != null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  818)                 final Integer groupStatusEnum = JdbcSupport.getInteger(rs, "statusEnum");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  819)                 final EnumOptionData groupStatus = ClientEnumerations.status(groupStatusEnum);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  820)                 final LocalDate activationDate = JdbcSupport.getLocalDate(rs, "activationDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  821)                 groupData = GroupGeneralData.instance(groupId, groupName, groupExternalId, groupStatus, activationDate, groupOfficeId,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  822)                         null, groupParentId, null, groupStaffId, null, groupHierarchy, null);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  823)             }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  824) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  825)             final Integer loanCounter = JdbcSupport.getInteger(rs, "loanCounter");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  826)             final Integer loanProductCounter = JdbcSupport.getInteger(rs, "loanProductCounter");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  827)             final BigDecimal fixedEmiAmount = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "fixedEmiAmount");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  828)             final Boolean isNPA = rs.getBoolean("isNPA");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  829) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  830)             final int daysInMonth = JdbcSupport.getInteger(rs, "daysInMonth");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  831)             final EnumOptionData daysInMonthType = CommonEnumerations.daysInMonthType(daysInMonth);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  832)             final int daysInYear = JdbcSupport.getInteger(rs, "daysInYear");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  833)             final EnumOptionData daysInYearType = CommonEnumerations.daysInYearType(daysInYear);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  834)             final boolean isInterestRecalculationEnabled = rs.getBoolean("isInterestRecalculationEnabled");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  835)             final Boolean createStandingInstructionAtDisbursement = rs.getBoolean("createStandingInstructionAtDisbursement");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  836) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  837)             LoanInterestRecalculationData interestRecalculationData = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  838)             if (isInterestRecalculationEnabled) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  839) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  840)                 final Long lprId = JdbcSupport.getLong(rs, "lirId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  841)                 final Long productId = JdbcSupport.getLong(rs, "loanId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  842)                 final int compoundTypeEnumValue = JdbcSupport.getInteger(rs, "compoundType");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  843)                 final EnumOptionData interestRecalculationCompoundingType = LoanEnumerations
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  844)                         .interestRecalculationCompoundingType(compoundTypeEnumValue);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  845)                 final int rescheduleStrategyEnumValue = JdbcSupport.getInteger(rs, "rescheduleStrategy");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  846)                 final EnumOptionData rescheduleStrategyType = LoanEnumerations.rescheduleStrategyType(rescheduleStrategyEnumValue);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  847)                 final CalendarData calendarData = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  848)                 final int restFrequencyEnumValue = JdbcSupport.getInteger(rs, "restFrequencyEnum");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  849)                 final EnumOptionData restFrequencyType = LoanEnumerations.interestRecalculationFrequencyType(restFrequencyEnumValue);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  850)                 final int restFrequencyInterval = JdbcSupport.getInteger(rs, "restFrequencyInterval");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  851)                 final LocalDate restFrequencyDate = JdbcSupport.getLocalDate(rs, "restFrequencyDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  852) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  853)                 interestRecalculationData = new LoanInterestRecalculationData(lprId, productId, interestRecalculationCompoundingType,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  854)                         rescheduleStrategyType, calendarData, restFrequencyType, restFrequencyInterval, restFrequencyDate);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  855)             }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  856) 
94ec2995 (Aleksandar Vidakovic 2015-08-24 14:03:52 +0100  857)             final Boolean watchlist = rs.getBoolean("watchlist");
34276f03 (Alex Litvinenko      2017-07-03 21:15:25 +0300  858)             final Boolean pausedLPI = rs.getBoolean("pausedLPI");
94ec2995 (Aleksandar Vidakovic 2015-08-24 14:03:52 +0100  859) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  860)             return LoanAccountData.basicLoanDetails(id, accountNo, status, externalId, clientId, clientName, clientOfficeId, groupData,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  861)                     loanType, loanProductId, loanProductName, loanProductDescription, fundId, fundName, loanPurposeId, loanPurposeName,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  862)                     loanOfficerId, loanOfficerName, currencyData, proposedPrincipal, principal, approvedPrincipal, totalOverpaid,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  863)                     inArrearsTolerance, termFrequency, termPeriodFrequencyType, numberOfRepayments, repaymentEvery, repaymentFrequencyType,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  864)                     repaymentFrequencyNthDayType, repaymentFrequencyDayOfWeekType, transactionStrategyId, transactionStrategyName,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  865)                     amortizationType, interestRatePerPeriod, interestRateFrequencyType, annualInterestRate, interestType,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  866)                     interestCalculationPeriodType, expectedFirstRepaymentOnDate, graceOnPrincipalPayment, graceOnInterestPayment,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  867)                     graceOnInterestCharged, interestChargedFromDate, timeline, loanSummary, feeChargesDueAtDisbursementCharged,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530  868)                     syncDisbursementWithMeeting, loanCounter, loanProductCounter, multiDisburseLoan, fixedEmiAmount,
afa97884 (Alex Litvinenko      2015-02-16 16:40:52 +0200  869)                     outstandingLoanBalance, inArrears, daysInArrears, graceOnArrearsAgeing, isNPA, daysInMonthType, daysInYearType,
34276f03 (Alex Litvinenko      2017-07-03 21:15:25 +0300  870)                     isInterestRecalculationEnabled, interestRecalculationData, createStandingInstructionAtDisbursement, watchlist, pausedLPI);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  871)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  872)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  873) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  874)     private static final class MusoniOverdueLoanScheduleMapper implements RowMapper<OverdueLoanScheduleData> {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  875) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  876)         public String schema() {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  877)             return " ls.loan_id as loanId, ls.installment as period, ls.fromdate as fromDate, ls.duedate as dueDate, ls.obligations_met_on_date as obligationsMetOnDate, ls.completed_derived as complete,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  878)                     + " ls.principal_amount as principalDue, ls.principal_completed_derived as principalPaid, ls.principal_writtenoff_derived as principalWrittenOff, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  879)                     + " ls.interest_amount as interestDue, ls.interest_completed_derived as interestPaid, ls.interest_waived_derived as interestWaived, ls.interest_writtenoff_derived as interestWrittenOff, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  880)                     + " ls.fee_charges_amount as feeChargesDue, ls.fee_charges_completed_derived as feeChargesPaid, ls.fee_charges_waived_derived as feeChargesWaived, ls.fee_charges_writtenoff_derived as feeChargesWrittenOff, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  881)                     + " ls.penalty_charges_amount as penaltyChargesDue, ls.penalty_charges_completed_derived as penaltyChargesPaid, ls.penalty_charges_waived_derived as penaltyChargesWaived, ls.penalty_charges_writtenoff_derived as penaltyChargesWrittenOff, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  882)                     + " ls.total_paid_in_advance_derived as totalPaidInAdvanceForPeriod, ls.total_paid_late_derived as totalPaidLateForPeriod, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  883)                     + " mc.amount,mc.id as chargeId "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  884)                     + " from m_loan_repayment_schedule ls "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  885)                     + " inner join m_loan ml on ml.id = ls.loan_id "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  886)                     + " join m_product_loan_charge plc on plc.product_loan_id = ml.product_id "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  887)                     + " join m_charge mc on mc.id = plc.charge_id ";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  888) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  889)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  890) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  891)         @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  892)         public OverdueLoanScheduleData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  893)             final Long chargeId = rs.getLong("chargeId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  894)             final Long loanId = rs.getLong("loanId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  895)             final BigDecimal amount = rs.getBigDecimal("amount");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  896)             final String dateFormat = "yyyy-MM-dd";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  897)             final String dueDate = rs.getString("dueDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  898)             final String locale = "en_GB";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  899) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  900)             final BigDecimal principalDue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalDue");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  901)             final BigDecimal principalPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalPaid");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  902)             final BigDecimal principalWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalWrittenOff");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  903) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  904)             final BigDecimal principalOutstanding = principalDue.subtract(principalPaid).subtract(principalWrittenOff);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  905) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  906)             final BigDecimal interestExpectedDue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestDue");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  907)             final BigDecimal interestPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestPaid");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  908)             final BigDecimal interestWaived = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestWaived");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  909)             final BigDecimal interestWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestWrittenOff");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  910) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  911)             final BigDecimal interestActualDue = interestExpectedDue.subtract(interestWaived).subtract(interestWrittenOff);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  912)             final BigDecimal interestOutstanding = interestActualDue.subtract(interestPaid);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530  913) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  914)             final BigDecimal feeChargeExpectedDue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesDue");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  915)             final BigDecimal feeChargesPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesPaid");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  916)             final BigDecimal feeChargesWaived = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesWaived");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  917)             final BigDecimal feeChargesWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesWrittenOff");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  918) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  919)             final BigDecimal feeActualDue = feeChargeExpectedDue.subtract(feeChargesWaived).subtract(feeChargesWrittenOff);
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  920)             final BigDecimal feeOutstanding = feeActualDue.subtract(feeChargesPaid);
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  921) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  922)             final Integer installmentNumber = JdbcSupport.getIntegerDefaultToNullIfZero(rs, "period");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  923)             final OverdueLoanScheduleData overdueLoanScheduleData = new OverdueLoanScheduleData(loanId, chargeId, dueDate, amount,
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  924)                     dateFormat, locale, principalOutstanding, interestOutstanding, feeOutstanding, installmentNumber);
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  925) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  926)             return overdueLoanScheduleData;
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  927)         }
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  928)     }
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  929) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  930)     private static final class OverdueMaturityDateLoanScheduleMapper implements RowMapper<OverdueLoanScheduleData> {
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  931) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  932)         public String schema() {
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  933)             return " ml.id as loanId,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  934)                     + " mc.amount as amount,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  935)                     + " mc.id as chargeId,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  936)                     + " ml.maturedon_date as maturityDate,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  937)                     + " mlc.due_for_collection_as_of_date as dueDate,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  938)                     + " max(ls.installment) as period,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  939) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  940)                     + " ml.principal_amount as principalDue,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  941)                     + " ml.principal_repaid_derived as principalPaid,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  942)                     + " ml.principal_writtenoff_derived as principalWrittenOff,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  943)                     + " ml.interest_charged_derived as interestDue,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  944)                     + " ml.interest_repaid_derived as interestPaid,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  945)                     + " ml.interest_waived_derived as interestWaived,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  946)                     + " ml.interest_writtenoff_derived as interestWrittenOff,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  947)                     + " ml.fee_charges_charged_derived as feeChargesDue,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  948)                     + " ml.fee_charges_repaid_derived as feeChargesPaid,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  949)                     + " ml.fee_charges_waived_derived as feeChargesWaived,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  950)                     + " ml.fee_charges_writtenoff_derived as feeChargesWrittenOff,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  951)                     + " ml.penalty_charges_charged_derived as penaltyChargesDue,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  952)                     + " ml.penalty_charges_repaid_derived as penaltyChargesPaid,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  953)                     + " ml.penalty_charges_waived_derived as penaltyChargesWaived,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  954)                     + " ml.penalty_charges_writtenoff_derived as penaltyChargesWrittenOff"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  955) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  956) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  957)                     + " from m_loan ml"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  958)                     + " left join m_loan_charge mlc on mlc.loan_id = ml.id and mlc.charge_time_enum = 12"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  959)                     + " inner join m_loan_repayment_schedule ls on ml.id = ls.loan_id"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  960)                     + " left join m_product_loan_charge plc on plc.product_loan_id = ml.product_id"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  961)                     + " left join m_charge mc on mc.id = plc.charge_id ";
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  962) //            where
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  963) //                    (DATE_SUB('2016-02-01',INTERVAL 2 DAY) > ml.maturedon_date and (mlc.due_for_collection_as_of_date is null or DATE_SUB('2016-03-01',INTERVAL 2 DAY) > mlc.due_for_collection_as_of_date))
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  964) //            and mc.charge_applies_to_enum =1
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  965) //            and mc.charge_time_enum = 12
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  966) //            and ml.loan_status_id IN (300, 800, 900)
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  967) //            group by ls.loan_id
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  968) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  969) //            return " ls.loan_id as loanId, ls.installment as period, ls.fromdate as fromDate, ls.duedate as dueDate, ls.obligations_met_on_date as obligationsMetOnDate, ls.completed_derived as complete,"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  970) //                    + " ls.principal_amount as principalDue, ls.principal_completed_derived as principalPaid, ls.principal_writtenoff_derived as principalWrittenOff, "
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  971) //                    + " ls.interest_amount as interestDue, ls.interest_completed_derived as interestPaid, ls.interest_waived_derived as interestWaived, ls.interest_writtenoff_derived as interestWrittenOff, "
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  972) //                    + " ls.fee_charges_amount as feeChargesDue, ls.fee_charges_completed_derived as feeChargesPaid, ls.fee_charges_waived_derived as feeChargesWaived, ls.fee_charges_writtenoff_derived as feeChargesWrittenOff, "
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  973) //                    + " ls.penalty_charges_amount as penaltyChargesDue, ls.penalty_charges_completed_derived as penaltyChargesPaid, ls.penalty_charges_waived_derived as penaltyChargesWaived, ls.penalty_charges_writtenoff_derived as penaltyChargesWrittenOff, "
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  974) //                    + " ls.total_paid_in_advance_derived as totalPaidInAdvanceForPeriod, ls.total_paid_late_derived as totalPaidLateForPeriod, "
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  975) //                    + " mc.amount,mc.id as chargeId "
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  976) //                    + " from m_loan_repayment_schedule ls "
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  977) //                    + " inner join m_loan ml on ml.id = ls.loan_id "
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  978) //                    + " join m_product_loan_charge plc on plc.product_loan_id = ml.product_id "
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  979) //                    + " join m_charge mc on mc.id = plc.charge_id ";
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  980) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  981)         }
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  982) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  983)         @Override
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  984)         public OverdueLoanScheduleData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  985)             final Long chargeId = rs.getLong("chargeId");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  986)             final Long loanId = rs.getLong("loanId");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  987)             final BigDecimal amount = rs.getBigDecimal("amount");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  988)             final String dateFormat = "yyyy-MM-dd";
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  989)             final String maturityDate = rs.getString("maturityDate");
89b791be (Alex Litvinenko      2015-07-06 17:41:46 +0300  990)             String dueDate = rs.getString("maturityDate");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  991)             final String locale = "en_GB";
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  992) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  993)             final BigDecimal principalDue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalDue");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  994)             final BigDecimal principalPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalPaid");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  995)             final BigDecimal principalWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalWrittenOff");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  996) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  997)             final BigDecimal principalOutstanding = principalDue.subtract(principalPaid).subtract(principalWrittenOff);
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  998) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200  999)             final BigDecimal interestExpectedDue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestDue");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1000)             final BigDecimal interestPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestPaid");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1001)             final BigDecimal interestWaived = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestWaived");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1002)             final BigDecimal interestWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestWrittenOff");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1003) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1004)             final BigDecimal interestActualDue = interestExpectedDue.subtract(interestWaived).subtract(interestWrittenOff);
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1005)             final BigDecimal interestOutstanding = interestActualDue.subtract(interestPaid);
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1006) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1007)             final BigDecimal feeChargeExpectedDue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesDue");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1008)             final BigDecimal feeChargesPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesPaid");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1009)             final BigDecimal feeChargesWaived = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesWaived");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1010)             final BigDecimal feeChargesWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesWrittenOff");
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1011) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1012)             final BigDecimal feeActualDue = feeChargeExpectedDue.subtract(feeChargesWaived).subtract(feeChargesWrittenOff);
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1013)             final BigDecimal feeOutstanding = feeActualDue.subtract(feeChargesPaid);
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1014) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1015)             final Integer installmentNumber = JdbcSupport.getIntegerDefaultToNullIfZero(rs, "period");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1016)             final OverdueLoanScheduleData overdueLoanScheduleData = new OverdueLoanScheduleData(loanId, chargeId, dueDate, amount,
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1017)                     dateFormat, locale, principalOutstanding, interestOutstanding, feeOutstanding, installmentNumber);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1018) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1019)             return overdueLoanScheduleData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1020)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1021)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1022) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1023)     private static final class LoanScheduleResultSetExtractor implements ResultSetExtractor<LoanScheduleData> {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1024) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1025)         private final CurrencyData currency;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1026)         private final DisbursementData disbursement;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1027)         private final BigDecimal totalFeeChargesDueAtDisbursement;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1028)         private final Collection<DisbursementData> disbursementData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1029)         private LocalDate lastDueDate;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1030)         private BigDecimal outstandingLoanPrincipalBalance;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1031)         private boolean excludePastUndisbursed;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1032) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1033)         public LoanScheduleResultSetExtractor(final RepaymentScheduleRelatedLoanData repaymentScheduleRelatedLoanData,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1034)                 Collection<DisbursementData> disbursementData, boolean isInterestRecalculationEnabled) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1035)             this.currency = repaymentScheduleRelatedLoanData.getCurrency();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1036)             this.disbursement = repaymentScheduleRelatedLoanData.disbursementData();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1037)             this.totalFeeChargesDueAtDisbursement = repaymentScheduleRelatedLoanData.getTotalFeeChargesAtDisbursement();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1038)             this.lastDueDate = this.disbursement.disbursementDate();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1039)             this.outstandingLoanPrincipalBalance = this.disbursement.amount();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1040)             this.disbursementData = disbursementData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1041)             this.excludePastUndisbursed = isInterestRecalculationEnabled;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1042)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1043) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1044)         public String schema() {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1045) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1046)             return " ls.loan_id as loanId, ls.installment as period, ls.fromdate as fromDate, ls.duedate as dueDate, ls.obligations_met_on_date as obligationsMetOnDate, ls.completed_derived as complete,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1047)                     + " ls.principal_amount as principalDue, ls.principal_completed_derived as principalPaid, ls.principal_writtenoff_derived as principalWrittenOff, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1048)                     + " ls.interest_amount as interestDue, ls.interest_completed_derived as interestPaid, ls.interest_waived_derived as interestWaived, ls.interest_writtenoff_derived as interestWrittenOff, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1049)                     + " ls.fee_charges_amount as feeChargesDue, ls.fee_charges_completed_derived as feeChargesPaid, ls.fee_charges_waived_derived as feeChargesWaived, ls.fee_charges_writtenoff_derived as feeChargesWrittenOff, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1050)                     + " ls.penalty_charges_amount as penaltyChargesDue, ls.penalty_charges_completed_derived as penaltyChargesPaid, ls.penalty_charges_waived_derived as penaltyChargesWaived, ls.penalty_charges_writtenoff_derived as penaltyChargesWrittenOff, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1051)                     + " ls.total_paid_in_advance_derived as totalPaidInAdvanceForPeriod, ls.total_paid_late_derived as totalPaidLateForPeriod "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1052)                     + " from m_loan_repayment_schedule ls ";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1053)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1054) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1055)         @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1056)         public LoanScheduleData extractData(final ResultSet rs) throws SQLException, DataAccessException {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1057) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1058)             final LoanSchedulePeriodData disbursementPeriod = LoanSchedulePeriodData.disbursementOnlyPeriod(
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1059)                     this.disbursement.disbursementDate(), this.disbursement.amount(), this.totalFeeChargesDueAtDisbursement,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1060)                     this.disbursement.isDisbursed());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1061) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1062)             final Collection<LoanSchedulePeriodData> periods = new ArrayList<>();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1063)             final MonetaryCurrency monCurrency = new MonetaryCurrency(this.currency.code(), this.currency.decimalPlaces(),
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1064)                     this.currency.currencyInMultiplesOf());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1065)             BigDecimal totalPrincipalDisbursed = BigDecimal.ZERO;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1066)             if (disbursementData == null || disbursementData.isEmpty()) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1067)                 periods.add(disbursementPeriod);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1068)                 totalPrincipalDisbursed = Money.of(monCurrency, this.disbursement.amount()).getAmount();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1069)             } else {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1070)                 if (!this.disbursement.isDisbursed()) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1071)                     excludePastUndisbursed = false;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1072)                 }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1073)                 this.outstandingLoanPrincipalBalance = BigDecimal.ZERO;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1074)             }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1075) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1076)             Money totalPrincipalExpected = Money.zero(monCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1077)             Money totalPrincipalPaid = Money.zero(monCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1078)             Money totalInterestCharged = Money.zero(monCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1079)             Money totalFeeChargesCharged = Money.zero(monCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1080)             Money totalPenaltyChargesCharged = Money.zero(monCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1081)             Money totalWaived = Money.zero(monCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1082)             Money totalWrittenOff = Money.zero(monCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1083)             Money totalRepaymentExpected = Money.zero(monCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1084)             Money totalRepayment = Money.zero(monCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1085)             Money totalPaidInAdvance = Money.zero(monCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1086)             Money totalPaidLate = Money.zero(monCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1087)             Money totalOutstanding = Money.zero(monCurrency);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1088) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1089)             // update totals with details of fees charged during disbursement
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1090)             totalFeeChargesCharged = totalFeeChargesCharged.plus(disbursementPeriod.feeChargesDue());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1091)             totalRepaymentExpected = totalRepaymentExpected.plus(disbursementPeriod.feeChargesDue());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1092)             totalRepayment = totalRepayment.plus(disbursementPeriod.feeChargesPaid());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1093)             totalOutstanding = totalOutstanding.plus(disbursementPeriod.feeChargesDue()).minus(disbursementPeriod.feeChargesPaid());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1094) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1095)             Integer loanTermInDays = Integer.valueOf(0);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1096)             while (rs.next()) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1097) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1098)                 final Long loanId = rs.getLong("loanId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1099)                 final Integer period = JdbcSupport.getInteger(rs, "period");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1100)                 LocalDate fromDate = JdbcSupport.getLocalDate(rs, "fromDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1101)                 final LocalDate dueDate = JdbcSupport.getLocalDate(rs, "dueDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1102)                 final LocalDate obligationsMetOnDate = JdbcSupport.getLocalDate(rs, "obligationsMetOnDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1103)                 final boolean complete = rs.getBoolean("complete");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1104)                 if (disbursementData != null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1105)                     BigDecimal principal = BigDecimal.ZERO;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1106)                     for (DisbursementData data : disbursementData) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1107)                         if (fromDate.equals(this.disbursement.disbursementDate()) && data.disbursementDate().equals(fromDate)) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1108)                             principal = principal.add(data.amount());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1109)                             final LoanSchedulePeriodData periodData = LoanSchedulePeriodData.disbursementOnlyPeriod(
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1110)                                     data.disbursementDate(), data.amount(), this.totalFeeChargesDueAtDisbursement, data.isDisbursed());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1111)                             periods.add(periodData);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1112)                             this.outstandingLoanPrincipalBalance = this.outstandingLoanPrincipalBalance.add(data.amount());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1113)                         } else if (data.isDueForDisbursement(fromDate, dueDate)
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1114)                                 && this.outstandingLoanPrincipalBalance.compareTo(BigDecimal.ZERO) == 1) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1115)                             if (!excludePastUndisbursed
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1116)                                     || (excludePastUndisbursed && (data.isDisbursed() || !data.disbursementDate().isBefore(LocalDate.now())))) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1117)                                 principal = principal.add(data.amount());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1118)                                 final LoanSchedulePeriodData periodData = LoanSchedulePeriodData.disbursementOnlyPeriod(
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1119)                                         data.disbursementDate(), data.amount(), BigDecimal.ZERO, data.isDisbursed());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1120)                                 periods.add(periodData);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1121)                                 this.outstandingLoanPrincipalBalance = this.outstandingLoanPrincipalBalance.add(data.amount());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1122)                             }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1123)                         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1124)                     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1125)                     totalPrincipalDisbursed = totalPrincipalDisbursed.add(principal);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1126)                 }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1127) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1128)                 Integer daysInPeriod = Integer.valueOf(0);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1129)                 if (fromDate != null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1130)                     daysInPeriod = Days.daysBetween(fromDate, dueDate).getDays();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1131)                     loanTermInDays = Integer.valueOf(loanTermInDays.intValue() + daysInPeriod.intValue());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1132)                 }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1133) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1134)                 final BigDecimal principalDue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalDue");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1135)                 totalPrincipalExpected = totalPrincipalExpected.plus(principalDue);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1136)                 final BigDecimal principalPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalPaid");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1137)                 totalPrincipalPaid = totalPrincipalPaid.plus(principalPaid);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1138)                 final BigDecimal principalWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principalWrittenOff");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1139) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1140)                 final BigDecimal principalOutstanding = principalDue.subtract(principalPaid).subtract(principalWrittenOff);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1141) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1142)                 final BigDecimal interestExpectedDue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestDue");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1143)                 totalInterestCharged = totalInterestCharged.plus(interestExpectedDue);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1144)                 final BigDecimal interestPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestPaid");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1145)                 final BigDecimal interestWaived = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestWaived");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1146)                 final BigDecimal interestWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestWrittenOff");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1147) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1148)                 final BigDecimal interestActualDue = interestExpectedDue.subtract(interestWaived).subtract(interestWrittenOff);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1149)                 final BigDecimal interestOutstanding = interestActualDue.subtract(interestPaid);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1150) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1151)                 final BigDecimal feeChargesExpectedDue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesDue");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1152)                 totalFeeChargesCharged = totalFeeChargesCharged.plus(feeChargesExpectedDue);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1153)                 final BigDecimal feeChargesPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesPaid");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1154)                 final BigDecimal feeChargesWaived = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesWaived");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1155)                 final BigDecimal feeChargesWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "feeChargesWrittenOff");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1156) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1157)                 final BigDecimal feeChargesActualDue = feeChargesExpectedDue.subtract(feeChargesWaived).subtract(feeChargesWrittenOff);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1158)                 final BigDecimal feeChargesOutstanding = feeChargesActualDue.subtract(feeChargesPaid);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1159) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1160)                 final BigDecimal penaltyChargesExpectedDue = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "penaltyChargesDue");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1161)                 totalPenaltyChargesCharged = totalPenaltyChargesCharged.plus(penaltyChargesExpectedDue);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1162)                 final BigDecimal penaltyChargesPaid = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "penaltyChargesPaid");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1163)                 final BigDecimal penaltyChargesWaived = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "penaltyChargesWaived");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1164)                 final BigDecimal penaltyChargesWrittenOff = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "penaltyChargesWrittenOff");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1165) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1166)                 final BigDecimal totalPaidInAdvanceForPeriod = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1167)                         "totalPaidInAdvanceForPeriod");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1168)                 final BigDecimal totalPaidLateForPeriod = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "totalPaidLateForPeriod");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1169) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1170)                 final BigDecimal penaltyChargesActualDue = penaltyChargesExpectedDue.subtract(penaltyChargesWaived).subtract(
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1171)                         penaltyChargesWrittenOff);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1172)                 final BigDecimal penaltyChargesOutstanding = penaltyChargesActualDue.subtract(penaltyChargesPaid);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1173) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1174)                 final BigDecimal totalExpectedCostOfLoanForPeriod = interestExpectedDue.add(feeChargesExpectedDue).add(
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1175)                         penaltyChargesExpectedDue);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1176) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1177)                 final BigDecimal totalDueForPeriod = principalDue.add(totalExpectedCostOfLoanForPeriod);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1178)                 final BigDecimal totalPaidForPeriod = principalPaid.add(interestPaid).add(feeChargesPaid).add(penaltyChargesPaid);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1179)                 final BigDecimal totalWaivedForPeriod = interestWaived.add(feeChargesWaived).add(penaltyChargesWaived);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1180)                 totalWaived = totalWaived.plus(totalWaivedForPeriod);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1181)                 final BigDecimal totalWrittenOffForPeriod = principalWrittenOff.add(interestWrittenOff).add(feeChargesWrittenOff)
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1182)                         .add(penaltyChargesWrittenOff);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1183)                 totalWrittenOff = totalWrittenOff.plus(totalWrittenOffForPeriod);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1184)                 final BigDecimal totalOutstandingForPeriod = principalOutstanding.add(interestOutstanding).add(feeChargesOutstanding)
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1185)                         .add(penaltyChargesOutstanding);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1186) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1187)                 final BigDecimal totalActualCostOfLoanForPeriod = interestActualDue.add(feeChargesActualDue).add(penaltyChargesActualDue);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1188) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1189)                 totalRepaymentExpected = totalRepaymentExpected.plus(totalDueForPeriod);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1190)                 totalRepayment = totalRepayment.plus(totalPaidForPeriod);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1191)                 totalPaidInAdvance = totalPaidInAdvance.plus(totalPaidInAdvanceForPeriod);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1192)                 totalPaidLate = totalPaidLate.plus(totalPaidLateForPeriod);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1193)                 totalOutstanding = totalOutstanding.plus(totalOutstandingForPeriod);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1194) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1195)                 if (fromDate == null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1196)                     fromDate = this.lastDueDate;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1197)                 }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1198)                 final BigDecimal outstandingPrincipalBalanceOfLoan = this.outstandingLoanPrincipalBalance.subtract(principalDue);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1199) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1200)                 // update based on current period values
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1201)                 this.lastDueDate = dueDate;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1202)                 this.outstandingLoanPrincipalBalance = this.outstandingLoanPrincipalBalance.subtract(principalDue);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1203) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1204)                 final LoanSchedulePeriodData periodData = LoanSchedulePeriodData.repaymentPeriodWithPayments(loanId, period, fromDate,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1205)                         dueDate, obligationsMetOnDate, complete, principalDue, principalPaid, principalWrittenOff, principalOutstanding,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1206)                         outstandingPrincipalBalanceOfLoan, interestExpectedDue, interestPaid, interestWaived, interestWrittenOff,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1207)                         interestOutstanding, feeChargesExpectedDue, feeChargesPaid, feeChargesWaived, feeChargesWrittenOff,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1208)                         feeChargesOutstanding, penaltyChargesExpectedDue, penaltyChargesPaid, penaltyChargesWaived,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1209)                         penaltyChargesWrittenOff, penaltyChargesOutstanding, totalDueForPeriod, totalPaidForPeriod,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1210)                         totalPaidInAdvanceForPeriod, totalPaidLateForPeriod, totalWaivedForPeriod, totalWrittenOffForPeriod,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1211)                         totalOutstandingForPeriod, totalActualCostOfLoanForPeriod);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1212) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1213)                 periods.add(periodData);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1214)             }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1215) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1216)             return new LoanScheduleData(this.currency, periods, loanTermInDays, totalPrincipalDisbursed,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1217)                     totalPrincipalExpected.getAmount(), totalPrincipalPaid.getAmount(), totalInterestCharged.getAmount(),
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1218)                     totalFeeChargesCharged.getAmount(), totalPenaltyChargesCharged.getAmount(), totalWaived.getAmount(),
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1219)                     totalWrittenOff.getAmount(), totalRepaymentExpected.getAmount(), totalRepayment.getAmount(),
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1220)                     totalPaidInAdvance.getAmount(), totalPaidLate.getAmount(), totalOutstanding.getAmount());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1221)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1222) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1223)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1224) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1225)     private static final class LoanTransactionsMapper implements RowMapper<LoanTransactionData> {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1226) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1227)         public String LoanPaymentsSchema() {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1228) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1229)             return " tr.id as id, tr.transaction_type_enum as transactionType, tr.transaction_date as `date`, tr.amount as total, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1230)                     + " tr.principal_portion_derived as principal, tr.interest_portion_derived as interest, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1231)                     + " tr.fee_charges_portion_derived as fees, tr.penalty_charges_portion_derived as penalties, "
42f3bed7 (Frank Nkuyahaga      2018-06-13 08:18:44 +0300 1232)                     + " tr.overpayment_portion_derived as overpayment, tr.outstanding_loan_balance_derived as outstandingLoanBalance, "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1233)                     + " tr.unrecognized_income_portion as unrecognizedIncome,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1234)                     + " tr.submitted_on_date as submittedOnDate, "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1235)                     + " tr.manually_adjusted_or_reversed as manuallyReversed, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1236)                     + " pd.payment_type_cv_id as paymentType,pd.account_number as accountNumber,pd.check_number as checkNumber, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1237)                     + " pd.receipt_number as receiptNumber, pd.bank_number as bankNumber,pd.routing_code as routingCode, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1238)                     + " l.currency_code as currencyCode, l.currency_digits as currencyDigits, l.currency_multiplesof as inMultiplesOf, rc.`name` as currencyName, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1239)                     + " rc.display_symbol as currencyDisplaySymbol, rc.internationalized_name_code as currencyNameCode, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1240)                     + " cv.code_value as paymentTypeName, tr.external_id as externalId, tr.office_id as officeId, office.name as officeName, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1241)                     + " fromtran.id as fromTransferId, fromtran.is_reversed as fromTransferReversed,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1242)                     + " fromtran.transaction_date as fromTransferDate, fromtran.amount as fromTransferAmount,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1243)                     + " fromtran.description as fromTransferDescription,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1244)                     + " totran.id as toTransferId, totran.is_reversed as toTransferReversed,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1245)                     + " totran.transaction_date as toTransferDate, totran.amount as toTransferAmount,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1246)                     + " totran.description as toTransferDescription " + " from m_loan l join m_loan_transaction tr on tr.loan_id = l.id"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1247)                     + " join m_currency rc on rc.`code` = l.currency_code "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1248)                     + " left JOIN m_payment_detail pd ON tr.payment_detail_id = pd.id"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1249)                     + " left join m_code_value cv on pd.payment_type_cv_id = cv.id"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1250)                     + " left join m_office office on office.id=tr.office_id"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1251)                     + " left join m_account_transfer_transaction fromtran on fromtran.from_loan_transaction_id = tr.id "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1252)                     + " left join m_account_transfer_transaction totran on totran.to_loan_transaction_id = tr.id ";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1253)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1254) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1255)         @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1256)         public LoanTransactionData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1257) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1258)             final String currencyCode = rs.getString("currencyCode");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1259)             final String currencyName = rs.getString("currencyName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1260)             final String currencyNameCode = rs.getString("currencyNameCode");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1261)             final String currencyDisplaySymbol = rs.getString("currencyDisplaySymbol");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1262)             final Integer currencyDigits = JdbcSupport.getInteger(rs, "currencyDigits");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1263)             final Integer inMultiplesOf = JdbcSupport.getInteger(rs, "inMultiplesOf");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1264)             final CurrencyData currencyData = new CurrencyData(currencyCode, currencyName, currencyDigits, inMultiplesOf,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1265)                     currencyDisplaySymbol, currencyNameCode);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1266) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1267)             final Long id = rs.getLong("id");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1268)             final Long officeId = rs.getLong("officeId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1269)             final String officeName = rs.getString("officeName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1270)             final int transactionTypeInt = JdbcSupport.getInteger(rs, "transactionType");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1271)             final LoanTransactionEnumData transactionType = LoanEnumerations.transactionType(transactionTypeInt);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1272)             final boolean manuallyReversed = rs.getBoolean("manuallyReversed");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1273) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1274)             PaymentDetailData paymentDetailData = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1275) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1276)             if (transactionType.isPaymentOrReceipt()) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1277)                 final Long paymentTypeId = JdbcSupport.getLong(rs, "paymentType");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1278)                 if (paymentTypeId != null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1279)                     final String typeName = rs.getString("paymentTypeName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1280)                     final CodeValueData paymentType = CodeValueData.instance(paymentTypeId, typeName);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1281)                     final String accountNumber = rs.getString("accountNumber");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1282)                     final String checkNumber = rs.getString("checkNumber");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1283)                     final String routingCode = rs.getString("routingCode");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1284)                     final String receiptNumber = rs.getString("receiptNumber");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1285)                     final String bankNumber = rs.getString("bankNumber");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1286)                     paymentDetailData = new PaymentDetailData(id, paymentType, accountNumber, checkNumber, routingCode, receiptNumber,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1287)                             bankNumber);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1288)                 }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1289)             }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1290)             final LocalDate date = JdbcSupport.getLocalDate(rs, "date");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1291)             final LocalDate submittedOnDate = JdbcSupport.getLocalDate(rs, "submittedOnDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1292)             final BigDecimal totalAmount = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "total");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1293)             final BigDecimal principalPortion = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principal");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1294)             final BigDecimal interestPortion = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interest");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1295)             final BigDecimal feeChargesPortion = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "fees");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1296)             final BigDecimal penaltyChargesPortion = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "penalties");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1297)             final BigDecimal overPaymentPortion = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "overpayment");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1298)             final BigDecimal unrecognizedIncomePortion = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "unrecognizedIncome");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1299)             final BigDecimal outstandingLoanBalance = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "outstandingLoanBalance");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1300)             final String externalId = rs.getString("externalId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1301) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1302)             AccountTransferData transfer = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1303)             final Long fromTransferId = JdbcSupport.getLong(rs, "fromTransferId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1304)             final Long toTransferId = JdbcSupport.getLong(rs, "toTransferId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1305)             if (fromTransferId != null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1306)                 final LocalDate fromTransferDate = JdbcSupport.getLocalDate(rs, "fromTransferDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1307)                 final BigDecimal fromTransferAmount = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "fromTransferAmount");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1308)                 final boolean fromTransferReversed = rs.getBoolean("fromTransferReversed");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1309)                 final String fromTransferDescription = rs.getString("fromTransferDescription");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1310) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1311)                 transfer = AccountTransferData.transferBasicDetails(fromTransferId, currencyData, fromTransferAmount, fromTransferDate,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1312)                         fromTransferDescription, fromTransferReversed);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1313)             } else if (toTransferId != null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1314)                 final LocalDate toTransferDate = JdbcSupport.getLocalDate(rs, "toTransferDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1315)                 final BigDecimal toTransferAmount = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "toTransferAmount");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1316)                 final boolean toTransferReversed = rs.getBoolean("toTransferReversed");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1317)                 final String toTransferDescription = rs.getString("toTransferDescription");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1318) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1319)                 transfer = AccountTransferData.transferBasicDetails(toTransferId, currencyData, toTransferAmount, toTransferDate,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1320)                         toTransferDescription, toTransferReversed);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1321)             }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1322)             return new LoanTransactionData(id, officeId, officeName, transactionType, paymentDetailData, currencyData, date, totalAmount,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1323)                     principalPortion, interestPortion, feeChargesPortion, penaltyChargesPortion, overPaymentPortion,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1324)                     unrecognizedIncomePortion, externalId, transfer, null, outstandingLoanBalance, submittedOnDate, manuallyReversed);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1325)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1326)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1327) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1328)     private static final class LoanTransactionsAccountTransferMapper implements RowMapper<AccountTransferData> {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1329) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1330)         public String accountTransferSchema() {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1331) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1332)             return " l.currency_code as currencyCode, l.currency_digits as currencyDigits, l.currency_multiplesof as inMultiplesOf, rc.`name` as currencyName, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1333)                     + " rc.display_symbol as currencyDisplaySymbol, rc.internationalized_name_code as currencyNameCode, "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1334)                     + " fromtran.id as fromTransferId, fromtran.is_reversed as fromTransferReversed,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1335)                     + " fromtran.transaction_date as fromTransferDate, fromtran.amount as fromTransferAmount,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1336)                     + " fromtran.description as fromTransferDescription,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1337)                     + " totran.id as toTransferId, totran.is_reversed as toTransferReversed,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1338)                     + " totran.transaction_date as toTransferDate, totran.amount as toTransferAmount,"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1339)                     + " totran.description as toTransferDescription "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1340)                     + " from m_loan l join m_loan_transaction tr on tr.loan_id = l.id"
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1341)                     + " join m_currency rc on rc.`code` = l.currency_code "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1342)                     + " left join m_account_transfer_transaction fromtran on fromtran.from_loan_transaction_id = tr.id "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1343)                     + " left join m_account_transfer_transaction totran on totran.to_loan_transaction_id = tr.id ";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1344)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1345) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1346)         @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1347)         public AccountTransferData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1348) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1349)             final String currencyCode = rs.getString("currencyCode");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1350)             final String currencyName = rs.getString("currencyName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1351)             final String currencyNameCode = rs.getString("currencyNameCode");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1352)             final String currencyDisplaySymbol = rs.getString("currencyDisplaySymbol");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1353)             final Integer currencyDigits = JdbcSupport.getInteger(rs, "currencyDigits");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1354)             final Integer inMultiplesOf = JdbcSupport.getInteger(rs, "inMultiplesOf");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1355)             final CurrencyData currencyData = new CurrencyData(currencyCode, currencyName, currencyDigits, inMultiplesOf,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1356)                     currencyDisplaySymbol, currencyNameCode);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1357) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1358)             AccountTransferData transfer = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1359)             final Long fromTransferId = JdbcSupport.getLong(rs, "fromTransferId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1360)             final Long toTransferId = JdbcSupport.getLong(rs, "toTransferId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1361)             if (fromTransferId != null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1362)                 final LocalDate fromTransferDate = JdbcSupport.getLocalDate(rs, "fromTransferDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1363)                 final BigDecimal fromTransferAmount = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "fromTransferAmount");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1364)                 final boolean fromTransferReversed = rs.getBoolean("fromTransferReversed");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1365)                 final String fromTransferDescription = rs.getString("fromTransferDescription");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1366) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1367)                 transfer = AccountTransferData.transferBasicDetails(fromTransferId, currencyData, fromTransferAmount, fromTransferDate,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1368)                         fromTransferDescription, fromTransferReversed);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1369)             } else if (toTransferId != null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1370)                 final LocalDate toTransferDate = JdbcSupport.getLocalDate(rs, "toTransferDate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1371)                 final BigDecimal toTransferAmount = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "toTransferAmount");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1372)                 final boolean toTransferReversed = rs.getBoolean("toTransferReversed");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1373)                 final String toTransferDescription = rs.getString("toTransferDescription");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1374) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1375)                 transfer = AccountTransferData.transferBasicDetails(toTransferId, currencyData, toTransferAmount, toTransferDate,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1376)                         toTransferDescription, toTransferReversed);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1377)             }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1378)             return transfer;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1379)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1380)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1381) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1382)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1383)     public LoanAccountData retrieveLoanProductDetailsTemplate(final Long productId, final Long clientId, final Long groupId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1384) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1385)         this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1386) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1387)         final LoanProductData loanProduct = this.loanProductReadPlatformService.retrieveLoanProduct(productId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1388)         final Collection<EnumOptionData> loanTermFrequencyTypeOptions = this.loanDropdownReadPlatformService
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1389)                 .retrieveLoanTermFrequencyTypeOptions();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1390)         final Collection<EnumOptionData> repaymentFrequencyTypeOptions = this.loanDropdownReadPlatformService
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1391)                 .retrieveRepaymentFrequencyTypeOptions();
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1392)         final Collection<EnumOptionData> repaymentFrequencyNthDayTypeOptions = this.loanDropdownReadPlatformService
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1393)                 .retrieveRepaymentFrequencyOptionsForNthDayOfMonth();
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1394)         final Collection<EnumOptionData> repaymentFrequencyDaysOfWeekTypeOptions = this.loanDropdownReadPlatformService
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1395)                 .retrieveRepaymentFrequencyOptionsForDaysOfWeek();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1396)         final Collection<EnumOptionData> interestRateFrequencyTypeOptions = this.loanDropdownReadPlatformService
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1397)                 .retrieveInterestRateFrequencyTypeOptions();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1398)         final Collection<EnumOptionData> amortizationTypeOptions = this.loanDropdownReadPlatformService
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1399)                 .retrieveLoanAmortizationTypeOptions();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1400)         final Collection<EnumOptionData> interestTypeOptions = this.loanDropdownReadPlatformService.retrieveLoanInterestTypeOptions();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1401)         final Collection<EnumOptionData> interestCalculationPeriodTypeOptions = this.loanDropdownReadPlatformService
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1402)                 .retrieveLoanInterestRateCalculatedInPeriodOptions();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1403)         final Collection<FundData> fundOptions = this.fundReadPlatformService.retrieveAllFunds();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1404)         final Collection<TransactionProcessingStrategyData> repaymentStrategyOptions = this.loanDropdownReadPlatformService
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1405)                 .retreiveTransactionProcessingStrategies();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1406)         final Collection<CodeValueData> loanPurposeOptions = this.codeValueReadPlatformService.retrieveCodeValuesByCode("LoanPurpose");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1407)         final Collection<CodeValueData> loanCollateralOptions = this.codeValueReadPlatformService
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1408)                 .retrieveCodeValuesByCode("LoanCollateral");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1409)         final Collection<ChargeData> chargeOptions = this.chargeReadPlatformService.retrieveLoanProductApplicableCharges(productId,
c75c7633 (Alex Litvinenko      2015-03-10 14:13:08 +0200 1410)                 new ChargeTimeType[] { ChargeTimeType.OVERDUE_INSTALLMENT, ChargeTimeType.OVERDUE_MATURITY_DATE });
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1411)         Integer loanCycleCounter = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1412)         if (loanProduct.useBorrowerCycle()) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1413)             if (clientId == null) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1414)                 loanCycleCounter = retriveLoanCounter(groupId, AccountType.GROUP.getValue(), loanProduct.getId());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1415)             } else {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1416)                 loanCycleCounter = retriveLoanCounter(clientId, loanProduct.getId());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1417)             }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1418)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1419) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1420)         return LoanAccountData.loanProductWithTemplateDefaults(loanProduct, loanTermFrequencyTypeOptions, repaymentFrequencyTypeOptions,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1421)                 repaymentFrequencyNthDayTypeOptions, repaymentFrequencyDaysOfWeekTypeOptions, repaymentStrategyOptions,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1422)                 interestRateFrequencyTypeOptions, amortizationTypeOptions, interestTypeOptions, interestCalculationPeriodTypeOptions,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1423)                 fundOptions, chargeOptions, loanPurposeOptions, loanCollateralOptions, loanCycleCounter);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1424)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1425) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1426)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1427)     public LoanAccountData retrieveClientDetailsTemplate(final Long clientId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1428) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1429)         this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1430) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1431)         final ClientData clientAccount = this.clientReadPlatformService.retrieveOne(clientId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1432)         final LocalDate expectedDisbursementDate = DateUtils.getLocalDateOfTenant();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1433) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1434)         return LoanAccountData.clientDefaults(clientAccount.id(), clientAccount.displayName(), clientAccount.officeId(),
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1435)                 expectedDisbursementDate);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1436)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1437) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1438)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1439)     public LoanAccountData retrieveGroupDetailsTemplate(final Long groupId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1440)         this.context.authenticatedUser();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1441)         final GroupGeneralData groupAccount = this.groupReadPlatformService.retrieveOne(groupId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1442)         final LocalDate expectedDisbursementDate = DateUtils.getLocalDateOfTenant();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1443)         return LoanAccountData.groupDefaults(groupAccount, expectedDisbursementDate);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1444)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1445) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1446)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1447)     public LoanAccountData retrieveGroupAndMembersDetailsTemplate(final Long groupId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1448)         GroupGeneralData groupAccount = this.groupReadPlatformService.retrieveOne(groupId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1449)         final LocalDate expectedDisbursementDate = DateUtils.getLocalDateOfTenant();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1450) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1451)         // get group associations
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1452)         final Collection<ClientData> membersOfGroup = this.clientReadPlatformService.retrieveActiveClientMembersOfGroup(groupId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1453)         if (!CollectionUtils.isEmpty(membersOfGroup)) {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1454)             final Collection<ClientData> activeClientMembers = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1455)             final Collection<CalendarData> calendarsData = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1456)             final CalendarData collectionMeetingCalendar = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1457)             final Collection<GroupRoleData> groupRoles = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1458)             groupAccount = GroupGeneralData.withAssocations(groupAccount, membersOfGroup, activeClientMembers, groupRoles, calendarsData,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1459)                     collectionMeetingCalendar);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1460)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1461) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1462)         return LoanAccountData.groupDefaults(groupAccount, expectedDisbursementDate);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1463)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1464) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1465)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1466)     public Collection<CalendarData> retrieveCalendars(final Long groupId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1467)         Collection<CalendarData> calendarsData = new ArrayList<>();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1468)         calendarsData.addAll(this.calendarReadPlatformService.retrieveParentCalendarsByEntity(groupId,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1469)                 CalendarEntityType.GROUPS.getValue(), null));
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1470)         calendarsData
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1471)                 .addAll(this.calendarReadPlatformService.retrieveCalendarsByEntity(groupId, CalendarEntityType.GROUPS.getValue(), null));
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1472)         calendarsData = this.calendarReadPlatformService.updateWithRecurringDates(calendarsData);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1473)         return calendarsData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1474)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1475) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1476)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1477)     public Collection<StaffData> retrieveAllowedLoanOfficers(final Long selectedOfficeId, final boolean staffInSelectedOfficeOnly) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1478)         if (selectedOfficeId == null) { return null; }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1479) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1480)         Collection<StaffData> allowedLoanOfficers = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1481) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1482)         if (staffInSelectedOfficeOnly) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1483)             // only bring back loan officers in selected branch/office
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1484)             allowedLoanOfficers = this.staffReadPlatformService.retrieveAllLoanOfficersInOfficeById(selectedOfficeId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1485)         } else {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1486)             // by default bring back all loan officers in selected
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1487)             // branch/office as well as loan officers in officer above
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1488)             // this office
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1489)             final boolean restrictToLoanOfficersOnly = true;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1490)             allowedLoanOfficers = this.staffReadPlatformService.retrieveAllStaffInOfficeAndItsParentOfficeHierarchy(selectedOfficeId,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1491)                     restrictToLoanOfficersOnly);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1492)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1493) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1494)         return allowedLoanOfficers;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1495)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1496) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1497)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1498)     public Collection<OverdueLoanScheduleData> retrieveAllLoansWithOverdueInstallments(final Long penaltyWaitPeriod) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1499)         final MusoniOverdueLoanScheduleMapper rm = new MusoniOverdueLoanScheduleMapper();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1500)         final String sql = "select " + rm.schema() + " where DATE_SUB(CURDATE(),INTERVAL ? DAY) > ls.duedate "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1501)                 + " and ls.completed_derived <> 1 and mc.charge_applies_to_enum =1 "
71725762 (Alex Litvinenko      2015-02-27 15:42:58 +0200 1502)                 + " and mc.charge_time_enum = 9 and ml.loan_status_id IN (300, 800, 900) ";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1503)         return this.jdbcTemplate.query(sql, rm, new Object[] { penaltyWaitPeriod });
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1504)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1505) 
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1506)     @Override
6b9ff464 (Alex Litvinenko      2015-03-16 19:46:24 +0200 1507)     public Collection<OverdueLoanScheduleData> retrieveAllLoansWithOverdueMaturityDate() {
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1508)         final OverdueMaturityDateLoanScheduleMapper rm = new OverdueMaturityDateLoanScheduleMapper();
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1509)         final String sql = "select " + rm.schema() + " where "
bd224f9c (Frank Nkuyahaga      2019-05-30 16:03:09 +0300 1510)                     + " CURDATE() > ml.maturedon_date"
6b9ff464 (Alex Litvinenko      2015-03-16 19:46:24 +0200 1511)                     + " and mc.charge_applies_to_enum = 1"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1512)                     + " and mc.charge_time_enum = 12"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1513)                     + " and ml.loan_status_id IN (300, 800, 900)"
34276f03 (Alex Litvinenko      2017-07-03 21:15:25 +0300 1514)                     + " and ifnull(ml.paused_lpi, 0) = 0"
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1515)                     + " group by ls.loan_id";
6b9ff464 (Alex Litvinenko      2015-03-16 19:46:24 +0200 1516)         return this.jdbcTemplate.query(sql, rm);
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1517)     }
d4dda47d (Alex Litvinenko      2015-03-06 22:28:50 +0200 1518) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1519)     @SuppressWarnings("deprecation")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1520)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1521)     public Integer retriveLoanCounter(final Long groupId, final Integer loanType, Long productId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1522)         final String sql = "Select MAX(l.loan_product_counter) from m_loan l where l.group_id = ?  and l.loan_type_enum = ? and l.product_id=?";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1523)         return this.jdbcTemplate.queryForInt(sql, groupId, loanType, productId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1524)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1525) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1526)     @SuppressWarnings("deprecation")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1527)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1528)     public Integer retriveLoanCounter(final Long clientId, Long productId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1529)         final String sql = "Select MAX(l.loan_product_counter) from m_loan l where l.client_id = ? and l.product_id=?";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1530)         return this.jdbcTemplate.queryForInt(sql, clientId, productId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1531)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1532) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1533)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1534)     public Collection<DisbursementData> retrieveLoanDisbursementDetails(final Long loanId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1535)         final LoanDisbursementDetailMapper rm = new LoanDisbursementDetailMapper();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1536)         final String sql = "select " + rm.schema() + " where dd.loan_id=?  order by dd.expected_disburse_date";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1537)         return this.jdbcTemplate.query(sql, rm, new Object[] { loanId });
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1538)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1539) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1540)     private static final class LoanDisbursementDetailMapper implements RowMapper<DisbursementData> {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1541) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1542)         public String schema() {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1543)             return "dd.id as id,dd.expected_disburse_date as expectedDisbursementdate,dd.disbursedon_date as actualDisbursementdate,dd.principal as principal,dd.approved_principal as approvedPrincipal "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1544)                     + "from m_loan_disbursement_detail dd";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1545)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1546) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1547)         @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1548)         public DisbursementData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1549)             final Long id = rs.getLong("id");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1550)             final LocalDate expectedDisbursementdate = JdbcSupport.getLocalDate(rs, "expectedDisbursementdate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1551)             final LocalDate actualDisbursementdate = JdbcSupport.getLocalDate(rs, "actualDisbursementdate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1552)             final BigDecimal principal = rs.getBigDecimal("principal");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1553)             final BigDecimal approvedPrincipal = rs.getBigDecimal("approvedPrincipal");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1554) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1555)             final DisbursementData disbursementData = new DisbursementData(id, expectedDisbursementdate, actualDisbursementdate, principal,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1556)                     approvedPrincipal);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1557)             return disbursementData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1558)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1559) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1560)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1561) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1562)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1563)     public DisbursementData retrieveLoanDisbursementDetail(Long loanId, Long disbursementId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1564)         final LoanDisbursementDetailMapper rm = new LoanDisbursementDetailMapper();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1565)         final String sql = "select " + rm.schema() + " where dd.loan_id=? and dd.id=?";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1566)         return this.jdbcTemplate.queryForObject(sql, rm, new Object[] { loanId, disbursementId });
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1567)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1568) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1569)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1570)     public Collection<LoanTermVariationsData> retrieveLoanTermVariations(Long loanId, Integer termType) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1571)         final LoanTermVariationsMapper rm = new LoanTermVariationsMapper();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1572)         final String sql = "select " + rm.schema() + " where tv.loan_id=? and tv.term_type=?";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1573)         return this.jdbcTemplate.query(sql, rm, new Object[] { loanId, termType });
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1574)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1575) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1576)     private static final class LoanTermVariationsMapper implements RowMapper<LoanTermVariationsData> {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1577) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1578)         public String schema() {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1579)             return "tv.id as id,tv.applicable_from as variationApplicableFrom,tv.term_value as termValue "
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1580)                     + "from m_loan_term_variations tv";
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1581)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1582) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1583)         @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1584)         public LoanTermVariationsData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1585)             final Long id = rs.getLong("id");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1586)             final LocalDate variationApplicableFrom = JdbcSupport.getLocalDate(rs, "variationApplicableFrom");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1587)             final BigDecimal termValue = rs.getBigDecimal("termValue");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1588) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1589)             final LoanTermVariationsData loanTermVariationsData = new LoanTermVariationsData(id,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1590)                     LoanEnumerations.loanvariationType(LoanTermVariationType.EMI_AMOUNT), variationApplicableFrom, termValue);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1591)             return loanTermVariationsData;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1592)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1593) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1594)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1595) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1596)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1597)     public Collection<LoanScheduleAccrualData> retriveScheduleAccrualData() {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1598) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1599)         LoanScheduleAccrualMapper mapper = new LoanScheduleAccrualMapper();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1600)         final StringBuilder sqlBuilder = new StringBuilder(400);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1601)         sqlBuilder
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1602)                 .append("select ")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1603)                 .append(mapper.schema())
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1604)                 .append(" where ((ls.fee_charges_amount <> if(ls.accrual_fee_charges_derived is null,0, ls.accrual_fee_charges_derived))")
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1605)                 .append(" or ( ls.penalty_charges_amount <> if(ls.accrual_penalty_charges_derived is null,0,ls.accrual_penalty_charges_derived))")
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1606)                 .append(" or ( ls.interest_amount <> if(ls.accrual_interest_derived is null,0,ls.accrual_interest_derived)))")
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1607)                 .append("  and loan.loan_status_id in (:active) and mpl.accounting_type=:type and loan.is_npa=0 and ls.duedate <= CURDATE() order by loan.id,ls.duedate");
a2fd86a8 (Alex Litvinenko      2015-02-11 15:54:17 +0200 1608) 
a2fd86a8 (Alex Litvinenko      2015-02-11 15:54:17 +0200 1609)         final Collection<Integer> loanStatuses = new ArrayList<>(Arrays.asList(LoanStatus.ACTIVE_IN_GOOD_STANDING.getValue(), LoanStatus.ACTIVE_IN_BAD_STANDING.getValue()));
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1610)         Map<String, Object> paramMap = new HashMap<>(2);
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1611)         paramMap.put("active", loanStatuses);
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1612)         paramMap.put("type", AccountingRuleType.ACCRUAL_PERIODIC.getValue());
a2fd86a8 (Alex Litvinenko      2015-02-11 15:54:17 +0200 1613) 
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1614)         return this.namedParameterJdbcTemplate.query(sqlBuilder.toString(), paramMap, mapper);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1615)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1616) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1617)     @Override
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1618)     public Collection<LoanScheduleAccrualData> retrievePeriodicAccrualData(final LocalDate tillDate) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1619) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1620)         LoanSchedulePeriodicAccrualMapper mapper = new LoanSchedulePeriodicAccrualMapper();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1621)         final StringBuilder sqlBuilder = new StringBuilder(400);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1622)         sqlBuilder
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1623)                 .append("select ")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1624)                 .append(mapper.schema())
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1625)                 .append(" where ((ls.fee_charges_amount <> if(ls.accrual_fee_charges_derived is null,0, ls.accrual_fee_charges_derived))")
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1626)                 .append(" or (ls.penalty_charges_amount <> if(ls.accrual_penalty_charges_derived is null,0,ls.accrual_penalty_charges_derived))")
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1627)                 .append(" or (ls.interest_amount <> if(ls.accrual_interest_derived is null,0,ls.accrual_interest_derived)))")
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1628)                 .append("  and loan.loan_status_id in (:active) and mpl.accounting_type=:type and loan.is_npa=0 and (ls.duedate <= :tilldate or (ls.duedate > :tilldate and ls.fromdate < :tilldate)) order by loan.id,ls.duedate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1629)         Map<String, Object> paramMap = new HashMap<>(3);
a2fd86a8 (Alex Litvinenko      2015-02-11 15:54:17 +0200 1630)         final Collection<Integer> loanStatuses = new ArrayList<>(Arrays.asList(LoanStatus.ACTIVE_IN_GOOD_STANDING.getValue(), LoanStatus.ACTIVE_IN_BAD_STANDING.getValue()));
a2fd86a8 (Alex Litvinenko      2015-02-11 15:54:17 +0200 1631)         paramMap.put("active", loanStatuses);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1632)         paramMap.put("type", AccountingRuleType.ACCRUAL_PERIODIC.getValue());
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1633)         paramMap.put("tilldate", formatter.print(tillDate));
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1634) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1635)         return this.namedParameterJdbcTemplate.query(sqlBuilder.toString(), paramMap, mapper);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1636)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1637) 
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1638) 	@Override
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1639) 	public Collection<LoanScheduleAccrualData> retrievePeriodicAccrualData(final LocalDate tillDate, final Long loanId) {
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1640) 
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1641) 		LoanSchedulePeriodicAccrualMapper mapper = new LoanSchedulePeriodicAccrualMapper();
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1642) 		final StringBuilder sqlBuilder = new StringBuilder(400);
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1643) 		sqlBuilder
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1644) 				.append("select ")
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1645) 				.append(mapper.schema())
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1646) 				.append(" where ((ls.fee_charges_amount <> if(ls.accrual_fee_charges_derived is null,0, ls.accrual_fee_charges_derived))")
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1647) 				.append(" or (ls.penalty_charges_amount <> if(ls.accrual_penalty_charges_derived is null,0,ls.accrual_penalty_charges_derived))")
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1648) 				.append(" or (ls.interest_amount <> if(ls.accrual_interest_derived is null,0,ls.accrual_interest_derived)))")
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1649) 				.append(" and loan.id = :loanId")
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1650) 				.append("  and loan.loan_status_id in (:active) and mpl.accounting_type=:type and loan.is_npa=0 and (ls.duedate <= :tilldate or (ls.duedate > :tilldate and ls.fromdate < :tilldate)) order by loan.id,ls.duedate");
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1651) 		Map<String, Object> paramMap = new HashMap<>(3);
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1652) 		final Collection<Integer> loanStatuses = new ArrayList<>(Arrays.asList(LoanStatus.ACTIVE_IN_GOOD_STANDING.getValue(), LoanStatus.ACTIVE_IN_BAD_STANDING.getValue()));
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1653) 		paramMap.put("loanId", loanId);
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1654) 		paramMap.put("active", loanStatuses);
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1655) 		paramMap.put("type", AccountingRuleType.ACCRUAL_PERIODIC.getValue());
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1656) 		paramMap.put("tilldate", formatter.print(tillDate));
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1657) 
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1658) 		return this.namedParameterJdbcTemplate.query(sqlBuilder.toString(), paramMap, mapper);
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1659) 	}
7b1c39bc (Frank Nkuyahaga      2019-05-21 02:10:19 +0300 1660) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1661)     private static final class LoanSchedulePeriodicAccrualMapper implements RowMapper<LoanScheduleAccrualData> {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1662) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1663)         public String schema() {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1664)             final StringBuilder sqlBuilder = new StringBuilder(400);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1665)             sqlBuilder
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1666)                     .append("loan.id as loanId ,if(loan.client_id is null,mg.office_id,mc.office_id) as officeId,")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1667)                     .append("loan.accrued_till as accruedTill, loan.repayment_period_frequency_enum as frequencyEnum, ")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1668)                     .append("loan.interest_calculated_from_date as interestCalculatedFrom, ")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1669)                     .append("loan.repay_every as repayEvery,")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1670)                     .append("ls.installment as installmentNumber, ")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1671)                     .append("ls.duedate as duedate,ls.fromdate as fromdate ,ls.id as scheduleId,loan.product_id as productId,")
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1672)                     .append("ls.interest_amount as interest, ls.interest_waived_derived as interestWaived,")
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1673)                     .append("ls.penalty_charges_amount as penalty, ")
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1674)                     .append("ls.fee_charges_amount as charges, ")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1675)                     .append("ls.accrual_interest_derived as accinterest,ls.accrual_fee_charges_derived as accfeecharege,ls.accrual_penalty_charges_derived as accpenalty,")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1676)                     .append(" loan.currency_code as currencyCode,loan.currency_digits as currencyDigits,loan.currency_multiplesof as inMultiplesOf,")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1677)                     .append("curr.display_symbol as currencyDisplaySymbol,curr.name as currencyName,curr.internationalized_name_code as currencyNameCode")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1678)                     .append(" from m_loan_repayment_schedule ls ").append(" left join m_loan loan on loan.id=ls.loan_id ")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1679)                     .append(" left join m_product_loan mpl on mpl.id = loan.product_id")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1680)                     .append(" left join m_client mc on mc.id = loan.client_id ").append(" left join m_group mg on mg.id = loan.group_id")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1681)                     .append(" left join m_currency curr on curr.code = loan.currency_code");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1682)             return sqlBuilder.toString();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1683)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1684) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1685)         @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1686)         public LoanScheduleAccrualData mapRow(ResultSet rs, @SuppressWarnings("unused") int rowNum) throws SQLException {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1687) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1688)             final Long loanId = rs.getLong("loanId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1689)             final Long officeId = rs.getLong("officeId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1690)             final LocalDate accruedTill = JdbcSupport.getLocalDate(rs, "accruedTill");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1691)             final LocalDate interestCalculatedFrom = JdbcSupport.getLocalDate(rs, "interestCalculatedFrom");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1692)             final Integer installmentNumber = JdbcSupport.getInteger(rs, "installmentNumber");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1693) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1694)             final Integer frequencyEnum = JdbcSupport.getInteger(rs, "frequencyEnum");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1695)             final Integer repayEvery = JdbcSupport.getInteger(rs, "repayEvery");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1696)             final PeriodFrequencyType frequency = PeriodFrequencyType.fromInt(frequencyEnum);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1697)             final LocalDate dueDate = JdbcSupport.getLocalDate(rs, "duedate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1698)             final LocalDate fromDate = JdbcSupport.getLocalDate(rs, "fromdate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1699)             final Long repaymentScheduleId = rs.getLong("scheduleId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1700)             final Long loanProductId = rs.getLong("productId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1701)             final BigDecimal interestIncome = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "interest");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1702)             final BigDecimal feeIncome = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "charges");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1703)             final BigDecimal penaltyIncome = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "penalty");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1704)             final BigDecimal interestIncomeWaived = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "interestWaived");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1705)             final BigDecimal accruedInterestIncome = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "accinterest");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1706)             final BigDecimal accruedFeeIncome = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "accfeecharege");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1707)             final BigDecimal accruedPenaltyIncome = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "accpenalty");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1708) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1709)             final String currencyCode = rs.getString("currencyCode");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1710)             final String currencyName = rs.getString("currencyName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1711)             final String currencyNameCode = rs.getString("currencyNameCode");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1712)             final String currencyDisplaySymbol = rs.getString("currencyDisplaySymbol");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1713)             final Integer currencyDigits = JdbcSupport.getInteger(rs, "currencyDigits");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1714)             final Integer inMultiplesOf = JdbcSupport.getInteger(rs, "inMultiplesOf");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1715)             final CurrencyData currencyData = new CurrencyData(currencyCode, currencyName, currencyDigits, inMultiplesOf,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1716)                     currencyDisplaySymbol, currencyNameCode);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1717) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1718)             return new LoanScheduleAccrualData(loanId, officeId, installmentNumber, accruedTill, frequency, repayEvery, dueDate, fromDate,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1719)                     repaymentScheduleId, loanProductId, interestIncome, feeIncome, penaltyIncome, accruedInterestIncome, accruedFeeIncome,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1720)                     accruedPenaltyIncome, currencyData, interestCalculatedFrom, interestIncomeWaived);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1721)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1722) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1723)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1724) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1725)     private static final class LoanScheduleAccrualMapper implements RowMapper<LoanScheduleAccrualData> {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1726) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1727)         public String schema() {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1728)             final StringBuilder sqlBuilder = new StringBuilder(400);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1729)             sqlBuilder
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1730)                     .append("loan.id as loanId ,if(loan.client_id is null,mg.office_id,mc.office_id) as officeId,")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1731)                     .append("ls.duedate as duedate,ls.fromdate as fromdate,ls.id as scheduleId,loan.product_id as productId,")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1732)                     .append("ls.installment as installmentNumber, ")
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1733)                     .append("ls.interest_amount as interest, ls.interest_waived_derived as interestWaived,")
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1734)                     .append("ls.penalty_charges_amount as penalty, ")
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1735)                     .append("ls.fee_charges_amount as charges, ")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1736)                     .append("ls.accrual_interest_derived as accinterest,ls.accrual_fee_charges_derived as accfeecharege,ls.accrual_penalty_charges_derived as accpenalty,")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1737)                     .append(" loan.currency_code as currencyCode,loan.currency_digits as currencyDigits,loan.currency_multiplesof as inMultiplesOf,")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1738)                     .append("curr.display_symbol as currencyDisplaySymbol,curr.name as currencyName,curr.internationalized_name_code as currencyNameCode")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1739)                     .append(" from m_loan_repayment_schedule ls ").append(" left join m_loan loan on loan.id=ls.loan_id ")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1740)                     .append(" left join m_product_loan mpl on mpl.id = loan.product_id")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1741)                     .append(" left join m_client mc on mc.id = loan.client_id ").append(" left join m_group mg on mg.id = loan.group_id")
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1742)                     .append(" left join m_currency curr on curr.code = loan.currency_code");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1743)             return sqlBuilder.toString();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1744)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1745) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1746)         @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1747)         public LoanScheduleAccrualData mapRow(ResultSet rs, @SuppressWarnings("unused") int rowNum) throws SQLException {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1748) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1749)             final Long loanId = rs.getLong("loanId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1750)             final Long officeId = rs.getLong("officeId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1751)             final Integer installmentNumber = JdbcSupport.getInteger(rs, "installmentNumber");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1752)             final LocalDate dueDate = JdbcSupport.getLocalDate(rs, "duedate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1753)             final LocalDate fromdate = JdbcSupport.getLocalDate(rs, "fromdate");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1754)             final Long repaymentScheduleId = rs.getLong("scheduleId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1755)             final Long loanProductId = rs.getLong("productId");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1756)             final BigDecimal interestIncome = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "interest");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1757)             final BigDecimal feeIncome = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "charges");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1758)             final BigDecimal penaltyIncome = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "penalty");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1759)             final BigDecimal interestIncomeWaived = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "interestWaived");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1760)             final BigDecimal accruedInterestIncome = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "accinterest");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1761)             final BigDecimal accruedFeeIncome = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "accfeecharege");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1762)             final BigDecimal accruedPenaltyIncome = JdbcSupport.getBigDecimalDefaultToNullIfZero(rs, "accpenalty");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1763) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1764)             final String currencyCode = rs.getString("currencyCode");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1765)             final String currencyName = rs.getString("currencyName");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1766)             final String currencyNameCode = rs.getString("currencyNameCode");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1767)             final String currencyDisplaySymbol = rs.getString("currencyDisplaySymbol");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1768)             final Integer currencyDigits = JdbcSupport.getInteger(rs, "currencyDigits");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1769)             final Integer inMultiplesOf = JdbcSupport.getInteger(rs, "inMultiplesOf");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1770)             final CurrencyData currencyData = new CurrencyData(currencyCode, currencyName, currencyDigits, inMultiplesOf,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1771)                     currencyDisplaySymbol, currencyNameCode);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1772)             final LocalDate accruedTill = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1773)             final PeriodFrequencyType frequency = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1774)             final Integer repayEvery = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1775)             final LocalDate interestCalculatedFrom = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1776)             return new LoanScheduleAccrualData(loanId, officeId, installmentNumber, accruedTill, frequency, repayEvery, dueDate, fromdate,
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1777)                     repaymentScheduleId, loanProductId, interestIncome, feeIncome, penaltyIncome, accruedInterestIncome, accruedFeeIncome,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1778)                     accruedPenaltyIncome, currencyData, interestCalculatedFrom, interestIncomeWaived);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1779)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1780)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1781) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1782)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1783)     public LoanTransactionData retrieveRecoveryPaymentTemplate(Long loanId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1784)         final Loan loan = this.loanRepository.findOne(loanId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1785)         if (loan == null) { throw new LoanNotFoundException(loanId); }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1786)         final LoanTransactionEnumData transactionType = LoanEnumerations.transactionType(LoanTransactionType.RECOVERY_REPAYMENT);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1787)         final Collection<CodeValueData> paymentOptions = this.codeValueReadPlatformService
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1788)                 .retrieveCodeValuesByCode(PaymentDetailConstants.paymentTypeCodeName);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1789)         BigDecimal outstandingLoanBalance = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1790)         final BigDecimal unrecognizedIncomePortion = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1791)         return new LoanTransactionData(null, null, null, transactionType, null, null, null, loan.getTotalWrittenOff(), null, null, null,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1792)                 null, null, unrecognizedIncomePortion, paymentOptions, null, null, null, outstandingLoanBalance, false);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1793) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1794)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1795) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1796)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1797)     public LoanTransactionData retrieveLoanWriteoffTemplate(final Long loanId) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1798) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1799)         final LoanAccountData loan = this.retrieveOne(loanId);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1800)         final BigDecimal outstandingLoanBalance = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1801)         final LoanTransactionEnumData transactionType = LoanEnumerations.transactionType(LoanTransactionType.WRITEOFF);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1802)         final BigDecimal unrecognizedIncomePortion = null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1803)         return new LoanTransactionData(null, null, null, transactionType, null, loan.currency(), DateUtils.getLocalDateOfTenant(),
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1804)                 loan.getTotalOutstandingAmount(), null, null, null, null, null, null, null, null, outstandingLoanBalance,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1805)                 unrecognizedIncomePortion, false);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1806)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1807) 
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1808)     @Override
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1809)     public Collection<Long> fetchArrearLoans() {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1810)         StringBuilder sqlBuilder = new StringBuilder();
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1811)         sqlBuilder.append("SELECT ml.id FROM m_loan ml ");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1812)         sqlBuilder.append(" INNER JOIN m_loan_repayment_schedule mr on mr.loan_id = ml.id ");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1813)         sqlBuilder.append(" LEFT JOIN m_loan_disbursement_detail dd on dd.loan_id=ml.id and dd.disbursedon_date is null ");
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1814)         sqlBuilder.append(" WHERE ml.loan_status_id in (:active) ");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1815)         sqlBuilder.append(" and ml.interest_recalculation_enabled = 1 ");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1816)         sqlBuilder.append(" and ml.is_npa = 0 ");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1817)         sqlBuilder.append(" and ((");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1818)         sqlBuilder.append(" mr.completed_derived is false ");
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1819)         sqlBuilder.append(" and mr.duedate < :duedate )");
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1820)         sqlBuilder.append(" or dd.expected_disburse_date < :disburse_date ) ");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1821)         sqlBuilder.append(" group by ml.id");
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1822)         try {
a2fd86a8 (Alex Litvinenko      2015-02-11 15:54:17 +0200 1823)             final Collection<Integer> loanStatuses = new ArrayList<>(Arrays.asList(LoanStatus.ACTIVE_IN_GOOD_STANDING.getValue(), LoanStatus.ACTIVE_IN_BAD_STANDING.getValue()));
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1824)             Map<String, Object> paramMap = new HashMap<>(3);
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1825)             paramMap.put("active", loanStatuses);
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1826)             paramMap.put("duedate", formatter.print(LocalDate.now()));
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1827)             paramMap.put("disburse_date", formatter.print(LocalDate.now()));
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1828) 
9d000d48 (Alex Litvinenko      2015-05-30 16:45:21 +0300 1829)             return this.namedParameterJdbcTemplate.queryForList(sqlBuilder.toString(), paramMap, Long.class);
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1830)         } catch (final EmptyResultDataAccessException e) {
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1831)             return null;
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1832)         }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1833)     }
e341ae78 (Pratik Patel         2014-11-14 15:24:42 +0530 1834) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1835)     @Override
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1836)     public Collection<LoanTransactionData> retrieveWaiverLoanTransactions(final Long loanId) {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1837)         try {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1838) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1839)             final LoanTransactionDerivedComponentMapper rm = new LoanTransactionDerivedComponentMapper();
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1840) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1841)             final String sql = "select " + rm.schema()
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1842)                     + " where tr.loan_id = ? and tr.transaction_type_enum = ? and tr.is_reversed=0 order by tr.transaction_date ASC,id ";
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1843)             return this.jdbcTemplate.query(sql, rm, new Object[] { loanId, LoanTransactionType.WAIVE_INTEREST.getValue() });
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1844)         } catch (final EmptyResultDataAccessException e) {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1845)             return null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1846)         }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1847)     }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1848) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1849)     @Override
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1850)     public boolean isGuaranteeRequired(final Long loanId) {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1851)         final String sql = "select pl.hold_guarantee_funds from m_loan ml inner join m_product_loan pl on pl.id = ml.product_id where ml.id=?";
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1852)         return this.jdbcTemplate.queryForObject(sql, Boolean.class, loanId);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1853)     }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1854) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1855)     private static final class LoanTransactionDerivedComponentMapper implements RowMapper<LoanTransactionData> {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1856) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1857)         public String schema() {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1858) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1859)             return " tr.id as id, tr.transaction_type_enum as transactionType, tr.transaction_date as `date`, tr.amount as total, "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1860)                     + " tr.principal_portion_derived as principal, tr.interest_portion_derived as interest, "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1861)                     + " tr.fee_charges_portion_derived as fees, tr.penalty_charges_portion_derived as penalties, "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1862)                     + " tr.overpayment_portion_derived as overpayment, tr.outstanding_loan_balance_derived as outstandingLoanBalance, "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1863)                     + " tr.unrecognized_income_portion as unrecognizedIncome " + " from m_loan_transaction tr ";
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1864)         }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1865) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1866)         @Override
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1867)         public LoanTransactionData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1868) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1869)             final Long id = rs.getLong("id");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1870)             final int transactionTypeInt = JdbcSupport.getInteger(rs, "transactionType");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1871)             final LoanTransactionEnumData transactionType = LoanEnumerations.transactionType(transactionTypeInt);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1872) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1873)             final LocalDate date = JdbcSupport.getLocalDate(rs, "date");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1874)             final BigDecimal totalAmount = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "total");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1875)             final BigDecimal principalPortion = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "principal");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1876)             final BigDecimal interestPortion = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interest");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1877)             final BigDecimal feeChargesPortion = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "fees");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1878)             final BigDecimal penaltyChargesPortion = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "penalties");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1879)             final BigDecimal overPaymentPortion = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "overpayment");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1880)             final BigDecimal unrecognizedIncomePortion = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "unrecognizedIncome");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1881)             final BigDecimal outstandingLoanBalance = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "outstandingLoanBalance");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1882) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1883)             return new LoanTransactionData(id, transactionType, date, totalAmount, principalPortion, interestPortion, feeChargesPortion,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1884)                     penaltyChargesPortion, overPaymentPortion, unrecognizedIncomePortion, outstandingLoanBalance, false);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1885)         }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1886)     }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1887) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1888)     @Override
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1889)     public Collection<LoanSchedulePeriodData> fetchWaiverInterestRepaymentData(final Long loanId) {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1890)         try {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1891) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1892)             final LoanRepaymentWaiverMapper rm = new LoanRepaymentWaiverMapper();
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1893) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1894)             final String sql = "select " + rm.getSchema()
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1895)                     + " where lrs.loan_id = ? and lrs.interest_waived_derived is not null order by lrs.installment ASC ";
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1896)             return this.jdbcTemplate.query(sql, rm, new Object[] { loanId });
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1897)         } catch (final EmptyResultDataAccessException e) {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1898)             return null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1899)         }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1900) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1901)     }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1902) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1903)     private static final class LoanRepaymentWaiverMapper implements RowMapper<LoanSchedulePeriodData> {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1904) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1905)         private final String sqlSchema;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1906) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1907)         public String getSchema() {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1908)             return this.sqlSchema;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1909)         }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1910) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1911)         public LoanRepaymentWaiverMapper() {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1912)             StringBuilder sb = new StringBuilder();
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1913)             sb.append("lrs.duedate as dueDate,lrs.interest_waived_derived interestWaived, lrs.installment as installment");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1914)             sb.append(" from m_loan_repayment_schedule lrs ");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1915)             sqlSchema = sb.toString();
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1916)         }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1917) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1918)         @Override
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1919)         public LoanSchedulePeriodData mapRow(ResultSet rs, @SuppressWarnings("unused") int rowNum) throws SQLException {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1920) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1921)             final Integer period = JdbcSupport.getInteger(rs, "installment");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1922)             final LocalDate dueDate = JdbcSupport.getLocalDate(rs, "dueDate");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1923)             final BigDecimal interestWaived = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs, "interestWaived");
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1924) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1925)             final LocalDate fromDate = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1926)             final LocalDate obligationsMetOnDate = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1927)             final Boolean complete = false;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1928)             final BigDecimal principalOriginalDue = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1929)             final BigDecimal principalPaid = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1930)             final BigDecimal principalWrittenOff = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1931)             final BigDecimal principalOutstanding = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1932)             final BigDecimal interestPaid = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1933)             final BigDecimal interestWrittenOff = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1934)             final BigDecimal interestOutstanding = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1935)             final BigDecimal feeChargesDue = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1936)             final BigDecimal feeChargesPaid = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1937)             final BigDecimal feeChargesWaived = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1938)             final BigDecimal feeChargesWrittenOff = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1939)             final BigDecimal feeChargesOutstanding = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1940)             final BigDecimal penaltyChargesDue = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1941)             final BigDecimal penaltyChargesPaid = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1942)             final BigDecimal penaltyChargesWaived = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1943)             final BigDecimal penaltyChargesWrittenOff = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1944)             final BigDecimal penaltyChargesOutstanding = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1945) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1946)             final BigDecimal totalDueForPeriod = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1947)             final BigDecimal totalPaidInAdvanceForPeriod = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1948)             final BigDecimal totalPaidLateForPeriod = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1949)             final BigDecimal totalActualCostOfLoanForPeriod = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1950)             final BigDecimal outstandingPrincipalBalanceOfLoan = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1951)             final BigDecimal interestDueOnPrincipalOutstanding = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1952)             Long loanId = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1953)             final BigDecimal totalWaived = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1954)             final BigDecimal totalWrittenOff = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1955)             final BigDecimal totalOutstanding = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1956)             final BigDecimal totalPaid = null;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1957) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1958)             return LoanSchedulePeriodData.repaymentPeriodWithPayments(loanId, period, fromDate, dueDate, obligationsMetOnDate, complete,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1959)                     principalOriginalDue, principalPaid, principalWrittenOff, principalOutstanding, outstandingPrincipalBalanceOfLoan,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1960)                     interestDueOnPrincipalOutstanding, interestPaid, interestWaived, interestWrittenOff, interestOutstanding,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1961)                     feeChargesDue, feeChargesPaid, feeChargesWaived, feeChargesWrittenOff, feeChargesOutstanding, penaltyChargesDue,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1962)                     penaltyChargesPaid, penaltyChargesWaived, penaltyChargesWrittenOff, penaltyChargesOutstanding, totalDueForPeriod,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1963)                     totalPaid, totalPaidInAdvanceForPeriod, totalPaidLateForPeriod, totalWaived, totalWrittenOff, totalOutstanding,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1964)                     totalActualCostOfLoanForPeriod);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1965)         }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1966)     }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1967) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1968)     @Override
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1969)     public Date retrieveMinimumDateOfRepaymentTransaction(Long loanId) {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1970)         // TODO Auto-generated method stub
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1971)         Date date = this.jdbcTemplate.queryForObject(
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1972)                 "select min(transaction_date) from m_loan_transaction where loan_id=? and transaction_type_enum=2",
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1973)                 new Object[] { loanId }, Date.class);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1974) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1975)         return date;
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1976)     }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1977) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1978)     @Override
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1979)     public PaidInAdvanceData retrieveTotalPaidInAdvance(Long loanId) {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1980)         // TODO Auto-generated method stub
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1981)         try {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1982)             final String sql = "  select (SUM(ifnull(mr.principal_completed_derived, 0)) +"
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1983)                     + " + SUM(ifnull(mr.interest_completed_derived, 0)) " + " + SUM(ifnull(mr.fee_charges_completed_derived, 0)) "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1984)                     + " + SUM(ifnull(mr.penalty_charges_completed_derived, 0))) as total_in_advance_derived "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1985)                     + " from m_loan ml INNER JOIN m_loan_repayment_schedule mr on mr.loan_id = ml.id "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1986)                     + " where ml.id=? and  mr.duedate >= CURDATE() group by ml.id having "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1987)                     + " (SUM(ifnull(mr.principal_completed_derived, 0))  " + " + SUM(ifnull(mr.interest_completed_derived, 0)) "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1988)                     + " + SUM(ifnull(mr.fee_charges_completed_derived, 0)) "
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1989)                     + "+  SUM(ifnull(mr.penalty_charges_completed_derived, 0))) > 0";
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1990)             BigDecimal bigDecimal = this.jdbcTemplate.queryForObject(sql, BigDecimal.class, loanId);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1991)             return new PaidInAdvanceData(bigDecimal);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1992)         } catch (DataAccessException e) {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1993)             // TODO Auto-generated catch block
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1994)             return new PaidInAdvanceData(new BigDecimal(0));
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1995)         }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1996)     }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1997) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1998)     @Override
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 1999)     public LoanTransactionData retrieveRefundByCashTemplate(Long loanId) {
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2000)         // TODO Auto-generated method stub
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2001)         this.context.authenticatedUser();
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2002) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2003)         // TODO - KW - OPTIMIZE - write simple sql query to fetch back date of
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2004)         // possible next transaction date.
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2005)         final Loan loan = this.loanRepository.findOne(loanId);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2006)         if (loan == null) { throw new LoanNotFoundException(loanId); }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2007) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2008)         final MonetaryCurrency currency = loan.getCurrency();
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2009)         final ApplicationCurrency applicationCurrency = this.applicationCurrencyRepository.findOneWithNotFoundDetection(currency);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2010) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2011)         final CurrencyData currencyData = applicationCurrency.toData();
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2012) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2013)         final LocalDate earliestUnpaidInstallmentDate = new LocalDate();
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2014) 
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2015)         final LoanTransactionEnumData transactionType = LoanEnumerations.transactionType(LoanTransactionType.REFUND_FOR_ACTIVE_LOAN);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2016)         final Collection<CodeValueData> paymentOptions = this.codeValueReadPlatformService
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2017)                 .retrieveCodeValuesByCode(PaymentDetailConstants.paymentTypeCodeName);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2018)         return new LoanTransactionData(null, null, null, transactionType, null, currencyData, earliestUnpaidInstallmentDate,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2019)                 retrieveTotalPaidInAdvance(loan.getId()).getPaidInAdvance(), null, null, null, null, null, null, paymentOptions, null,
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2020)                 null, null, null, false);
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2021)     }
0f3bc784 (architnaskar         2014-12-18 22:33:06 +0530 2022) 
4859dd4c (FINEM (U) LTD        2017-08-13 19:47:45 +1000 2023) }
